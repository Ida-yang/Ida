<template>
    <div class="header">
        <!-- 折叠按钮 -->
        <div class="collapse-btn" @click="collapseChage">
            <i class="el-icon-menu"></i>
        </div>
        <div class="logo">
            <span style="font-size:16px">纽恩泰QIS管理系统</span>
            
             
        </div>
        <el-select v-model="orgId" placeholder="切换组织" 
        @change='selectOrgId'
        id="changeOrg"
        style="width:260px;margin-left:-80px;margin-top:7px;">
                    <el-option
                    v-for="item in options"
                    :key="item.id"
                    :label="item.orgname"
                    :value="item.orgname">
                    </el-option>
            </el-select>
        <div class="header-right">
            <div class="header-user-con">
                <!-- 全屏显示 -->
                <div class="btn-fullscreen" @click="handleFullScreen">
                    <el-tooltip effect="dark" :content="fullscreen?`取消全屏`:`全屏`" placement="bottom">
                        <i class="el-icon-rank"></i>
                    </el-tooltip>
                </div>
                <el-dropdown class="user-name" trigger="click" @command="handleCommand">
                    <span class="el-dropdown-link" id="username" style="position: relative;top: -30px;left: 20px;">
                        {{username}} <i class="el-icon-caret-bottom"></i>
                    </span>
                    <el-dropdown-menu slot="dropdown" style="">
                        <el-dropdown-item divided  command="resPassWord">修改密码</el-dropdown-item>
                        <el-dropdown-item divided  command="loginout">退出登录</el-dropdown-item>
                    </el-dropdown-menu>
                </el-dropdown>

            </div>
        </div>
        <el-dialog :modal="false" center title="修改密码" :visible.sync="dialogFormVisible" width="40%" :close-on-click-modal="false">
            <el-form :model="reSetForm" :rules="rules" ref="reSetForm"  label-width="100px" label-position="left">
                <el-form-item prop="oldpass" label="旧密码">
                    <el-input v-model="reSetForm.oldpass" type="text" class="handle-input mr10" style="width:240px;" clearable></el-input>
                </el-form-item>
                <el-form-item prop="newpass" label="新密码">
                    <el-input v-model="reSetForm.newpass" type="text" class="handle-input mr10"  style="width:240px;" clearable></el-input>
                </el-form-item>
                <el-form-item prop="respass" label="确认密码">
                    <el-input type="text" v-model="reSetForm.respass" style="width:240px;" clearable></el-input>
                </el-form-item>    
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary"  @click="submitFormUser('reSetForm')">确 定</el-button>
            </div>
        </el-dialog>
    </div>
</template>
<script>
    import store from '../../store/store'
    import axios from 'axios'
    import bus from './bus';
    import $ from 'jquery'

    export default {
        data() {
            var validateoldpass = (rule, value, callback) => {
               if (value === '') {
                    callback(new Error('请输入密码'));
                }else if(!/^[a-z0-9_-]{0,18}$/.test(value)){
                    callback(new Error('用户名由数字、字母、下划线组成'));    
                }else {
                    callback();
                }
            };
            var validaterespass = (rule, value, callback) => {
                if(value==""){
                     callback(new Error('请输入确认密码')); 
                }else if(this.reSetForm.newpass!==value){
                    callback(new Error('两次输入不同，请重新输入'));    
                }else {
                    callback();
                }
            };
            return {
                orgId:'',
                dialogFormVisible: false,
                formLabelWidth: '120px',
                collapse: true,
                fullscreen: false,
                name: '',
                message: 2,
                reSetForm:{
                    oldpass:'',
                    newpass:'',
                    respass:''
                },
                rules: {
                    oldpass: [
                        { validator: validateoldpass, trigger: 'blur' }
                    ],
                    newpass: [
                        {validator: validateoldpass, trigger: 'blur'}
                    ],
                    respass: [
                        {validator: validaterespass, trigger: 'blur'}
                    ]
                }
            }
        },
        inject:["reload"],
        computed:{
            username(){
                return this.$store.state.userData.username
            },
            options(){
                return store.state.organizationList;
            }
        },
        beforeCreate(){
            let _this = this;
            axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.orgURL+'selectByCriteria',
                }).then(function(res){
                    _this.orgId = localStorage.getItem("orgname")
                    _this.$store.state.organizationList = res.data.result.records;
                    _this.$store.state.organizationListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                // console.log(err)
            })
                
        },  
        beforeMount(){
            this.orgId = localStorage.getItem("orgname")
        },
        mounted(){
            if(document.body.clientWidth < 1500){
                this.collapseChage();
            }

            //切换组织下拉框样式
            $("#changeOrg").css({
                "color": "#fff",
                "background": "rgb(46, 98, 135)",
                "border": "0px",
                "padding-left": "5px",   
                "padding-right": "0px",   
            });
            
            $("#changeOrg").mouseover(function(){
                $(this).css("background", "rgb(83, 129, 161)");
            });
            $("#changeOrg").mouseout(function(){
                $(this).css("background", "rgb(46, 98, 135)");
            });
            $("#username").mouseover(function(){
                $(this).css("background", "rgb(83, 129, 161)");
            });
            $("#username").mouseout(function(){
                $(this).css("background", "rgb(46, 98, 135)");
            });
        },
        methods:{
            //切换组织
            selectOrgId(val){
                let neworgId=null;
                for(var i=0;i<this.$store.state.organizationList.length;i++){
                    if(val == this.$store.state.organizationList[i].orgname){
                        neworgId=this.$store.state.organizationList[i].id  
                    }
                }
                let _this = this;
                axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.userUrl+'changeOrg?orgId='+neworgId,
                    }).then(function(res){
                        _this.orgId = res.data.result.orgname
                        localStorage.setItem("orgname",res.data.result.organization.orgname)
                        localStorage.setItem('orgId',res.data.result.orgId);
                        _this.$store.state.organizationList = res.data.result.records;
                        _this.$store.state.organizationListnumber = res.data.result.totalRecords;
                        _this.reload();
                    }).catch(function(err){
                    // console.log(err)
                })
            },
            //修改密码
             submitFormUser(formName){
                const _this = this;
                let obj = {};
                        obj.password = _this.reSetForm.oldpass;
                        obj.newPassword = _this.reSetForm.newpass;
                        obj.userId = _this.$store.state.userData.userId;
                        obj.account =  _this.$store.state.userData.account;
                _this.$refs[formName].validate((valid) => {
                    if (valid) {
                        axios({
                            method: 'post',
                            url: _this.$store.state.defaultHttp+"/user/changePassword",
                            data:JSON.stringify(obj),
                            headers:{'wmsnet-token':sessionStorage.getItem('token')}
                        }).then(function(res){
                            if(res.data.code ==200){
                                _this.$message({
                                    message: '密码修改成功',
                                    type: 'success'
                                })
                                _this.$router.push('/login')
                            }
                            if(res.data.code ==500){
                                _this.$message({
                                    message: res.data.message,
                                    type: 'success'
                                })
                            }
                        }).catch(function(err){
                            // console.log(err);
                        });
                    
                    } else {
                        _this.$message.error('提交错误，请检查您的网络');
                        return false;
                    }
                })
            },
            // 用户名下拉菜单选择事件
            handleCommand(command) {
                if(command == 'loginout'){
                    axios({
                        method: 'get',
                        url: this.$store.state.defaultHttp+this.$store.state.userUrl+'logout',
                    }).then(function(res){}).catch(function(err){});
                    localStorage.removeItem('ms_username');
                    localStorage.removeItem('userData');
                    this.$router.push('/login');
                }
                if(command == 'resPassWord'){
                    this.dialogFormVisible = true
                }
            },
            // 侧边栏折叠
            collapseChage(){
                
                this.collapse = !this.collapse;
                bus.$emit('collapse', this.collapse);
                // if(this.collapse){
                // }else{
                // }
            },
            // 全屏事件
            handleFullScreen(){
                let element = document.documentElement;
                if (this.fullscreen) {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.webkitCancelFullScreen) {
                        document.webkitCancelFullScreen();
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen();
                    } else if (document.msExitFullscreen) {
                        document.msExitFullscreen();
                    }
                } else {
                    if (element.requestFullscreen) {
                        element.requestFullscreen();
                    } else if (element.webkitRequestFullScreen) {
                        element.webkitRequestFullScreen();
                    } else if (element.mozRequestFullScreen) {
                        element.mozRequestFullScreen();
                    } else if (element.msRequestFullscreen) {
                        // IE11
                        element.msRequestFullscreen();
                    }
                }
                this.fullscreen = !this.fullscreen;
            }
        }
    }
</script>
<style scoped>
    /* .el-select .el-input__inner {
        height: 25px !important;
        line-height: 25px !important;
        color: #fff !important;
        background: rgb(46, 98, 135) !important;
    } */
    
    .header {
        position: relative;
        box-sizing: border-box;
        width: 100%;
        height: 40px;
        font-size: 14px;
        color: #fff;
        background: rgb(46, 98, 135);
    }
    .collapse-btn{
        float: left;
        padding: 0 21px;
        cursor: pointer;
        line-height: 40px;
    }
    .header .logo{
        float: left;
        width:250px;
        line-height: 40px;
    }
    .header-right{
        float: right;
        /* padding-right: 50px; */
        /* width: 150px; */
        margin: 8px 60px 0px 10px;
        height: 25px!important;
        line-height: 25px !important;
    }
    .header-user-con{
        display: inline-block;
        align-items: center;
    }
    .btn-fullscreen{
        transform: rotate(45deg);
        margin-right: 5px;
        font-size: 24px;
    }
    .btn-bell, .btn-fullscreen{
        position: relative;
        width: 30px;
        height: 30px;
        text-align: center;
        border-radius: 15px;
        cursor: pointer;
    }
    .btn-bell-badge{
        position: absolute;
        right: 0;
        top: -2px;
        width: 8px;
        height: 8px;
        border-radius: 4px;
        background: #f56c6c;
        color: #fff;
    }
    .btn-bell .el-icon-bell{
        color: #fff;
    }
    .user-name{
        margin-left: 30px;
        height:0px;
    }
    .user-avator{
        margin-left: 20px;
    }
    .user-avator img{
        display: block;
        width:40px;
        height:40px;
        border-radius: 50%;
    }
    .el-dropdown-link{
        color: #fff;
        cursor: pointer;
    }
    .el-dropdown-menu__item{
        text-align: center;
    }
</style>
