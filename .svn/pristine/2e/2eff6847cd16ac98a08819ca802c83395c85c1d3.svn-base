<template>
    <div>
        <div  class="grid-content">
            <el-button type="primary"  @click="printMyData">提交打印</el-button>
        </div>
        <div class="BarCodeBox" >
            <el-card :body-style="{ padding: '0px' }">
                <img src="../../../../assets/image/serialType1.png" class="image">
                <div style="padding: 14px;">
                    <div class="bottom clearfix">
                        <el-radio v-model="barcodeStyle"    label="0" style="margin-left:15%">样式一</el-radio>
                    </div>
                </div>
            </el-card>
        </div>
        <div class="BarCodeBox" style="margin-left:5%">
            <el-card :body-style="{ padding: '0px' }">
                <img src="../../../../assets/image/serialType2.png" class="image">
                <div style="padding: 14px;">
                    <div class="bottom clearfix">
                        <el-radio v-model="barcodeStyle" label="2" style="margin-left:15%">样式二</el-radio>
                    </div>
                </div>
            </el-card>
        </div>
        <div class="BarCodeBox" style="margin-left:5%;margin-bottom:1%">
            <el-card :body-style="{ padding: '0px' }">
                <img src="../../../../assets/image/serialType3.png" class="image">
                <div style="padding: 14px;">
                    <div class="bottom clearfix">
                        <el-radio v-model="barcodeStyle" label="3" style="margin-left:15%">样式三</el-radio>
                    </div>
                </div>
            </el-card>
        </div>
        <el-table
            :data="dataList.slice((currentPage-1)*pageSize,currentPage*pageSize)"
            ref="table"
            tooltip-effect="dark"
            style="width: 90%"
            border
            :max-height="maxheight"
            :row-key="getRowKeys"
            @selection-change="handleSelectionChange">
            <el-table-column
            type="selection"
            align="center"
            prop="clicked"
            width="100">
            </el-table-column>
            <el-table-column
            prop="No"
            fixed="left"
            label="序列号"
            align="center"
            header-align="center"
            width="250">
            </el-table-column>
            <el-table-column
            prop="GNo"
            fixed="left"
            label="产品编号"
            align="center"
            header-align="center"
            width="240">
            </el-table-column>
            <el-table-column
            prop="Name"
            label="产品名称"
            align="center"
            header-align="center"
            width="240">
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="currentPage"
            :page-sizes="[10, 15, 25, 50]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="dataList.length">
            </el-pagination>
        </div>
        <el-dialog
        title="打印"
        center
        :modal="false" 
        :visible.sync="dialogVisible"
        width="30%"
        >
            <el-select v-model="selectprinterNo" placeholder="请选择打印机" style="margin-left:20%">
                <el-option
                v-for="item in selectprinter"
                :key="item.printerNo"
                :label="item.printerName"
                :value="item.printerNo">
                </el-option>
            </el-select>
            <br/>
            <br/>
            <br/>
            <span style="margin-left:20%">打印份数</span>
            <el-input-number size="mini" v-model="copiesNum"></el-input-number>
            <span slot="footer" class="dialog-footer">
                <el-button @click="dialogVisible = false">取 消</el-button>
                <el-button type="primary" @click="confirmPrintMyData">确 定</el-button>
            </span>
        </el-dialog>
    </div>
</template>
<style>
    .image {
        width: 100%;
        display: block;
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'PrintSerialNumber',
        data(){
            return {
                AllDataList:[],
                dataList:[],
                barcodeStyle:'0',
                selectedData:[],
                selectDataList:[],
                select:null,
                idKey:'id',// 标识列表数据中每一行的唯一键的名称
                multipleSelectionAll:[],//所有选中的数据包含跨页数据
                multipleSelection:[],// 当前页选中的数据
                copiesNum:1,
                flag:true,
                dialogVisible: false,
                selectprinter:null,//打印机列表
                selectprinterNo:null,
                currentPage:1,//默认第一页
                pageSize:10,//默认10条
                getRowKeys(row) {
                    return row.id;
                },
                maxheight:null,
            }
        },
        created(){
            this.loadData();
            this.multipleSelectionAll = this.AllDataList;
        },
        mounted() {
            for(var i = 0; i < this.dataList.length; i++) {                    
                    this.$refs.table.toggleRowSelection(this.dataList[i], true);
                }
    	    // this.$refs.table.toggleRowSelection(this.dataList,true);
	    },
        methods:{
            loadData(){
                let _this=this
                let select = _this.$store.state.serialArr;
                _this.tableNumber = select.length;
                // console.log(_this.tableNumber)
                // console.log(select)
                for(let i=0;i<select.length;i++){
                    let selectData = {}
                    selectData.productwoid = select[i].id;
                    selectData.type = "pdfinish"
                    axios({
                        method: 'post',
                        url: _this.$store.state.defaultHttp+_this.$store.state.serial+'selectByCriteria',
                        data:selectData,
                    }).then(function(res){
                        let resList=res.data.result.records;
                        // console.log(res)
                        for(let z=0;z<resList.length;z++){
                            let List={};
                            List.id = resList[z].id;//id
                            List.No = resList[z].snnum;//序列号
                            List.QrCode = resList[z].qrCode;//序列号其他信息
                            List.Name = select[i].productname;//品名
                            List.Color = select[i].productcolor;//颜色
                            List.GNo = select[i].productnum;//料号
                            List.NumberNo = select[i].productmodel;//型号
                            List.Remark = select[i].productspec;//备注
                            List.productwoid = resList[z].productwoid;//单据id
                            List.Type = _this.barcodeStyle;//类型
                            List.clicked = true;
                            _this.dataList.push(List)
                            _this.AllDataList.push(List);
                        } 
                        // console.log(_this.AllDataList)
                    }).catch(function(err){
                    // console.log(err)
                    })
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.print+'select',
                    }).then(function(res){
                        _this.selectprinter = res.data.result
                    }).catch(function(err){
                        // toastr.error(resp.message);
                    })
                }
            },
            printMyData(){
                //加载在线打印机
                let _this = this;
                _this.flag = false;
                _this.selectDataList = _this.$store.state.printSelectData;
                // console.log(_this.selectDataList)
                
                if(this.selectDataList.length == 0){
                    this.$message({
                        message: '请先选择序列号',
                        type: 'warning'
                    });
                }else{
                    this.dialogVisible = true
                }
                // console.log(_this.selectedData)
            },
            confirmPrintMyData(){
                let str ="";
                if(this.selectprinterNo == null){
                    this.$message({
                        message: '请选择打印机',
                        type: 'warning'
                    });
                }
                if(this.copiesNum == 0){
                    this.$message({
                        message: '打印份数有误',
                        type: 'warning'
                    });
                }else{
                    let _this = this;
                    var serialLength =  _this.selectDataList[0].No.length;//第一个序列号长度
                    let allData = [];
                    var printIds = [];
                    var serialPrintNum = [];//对应单据打印的序列号数量
                    for(var i = 0; i < _this.selectDataList.length; i++) {
                        if( _this.selectDataList[i].No.length != serialLength) {
                            _this.$message({
                                message: "序列号["+ _this.selectDataList[i].No+"]长度不对",
                                type: 'warning'
                            });
                            return;
                        }
                        for (var j = 0; j < _this.copiesNum; j++) {
                            var obj = _this.selectDataList[i];
                            allData.push(obj);
                        }
                        var productwoid = _this.selectDataList[i].productwoid;
                        var flag = false;
                        for(var k = 0; k < _this.selectDataList.length; k++) {
                            if(_this.selectDataList[k].productwoid == productwoid) {
                                //单据已存在_this.selectDataList中
                                flag = true;
                                _this.selectDataList[k].num++;
                            }
                        }
                        if(!flag) {//单据未存在_this.selectDataList中
                            var obj = {};
                            obj.productwoid = productwoid;
                            obj.num = 1;
                            _this.selectDataList.push(obj);
                        }
                        let printId = {};
                        printId.id = _this.selectDataList[i].id.toString();
                        printId.otherColumn1 = "snnum";
                        printIds.push(printId);
                        // console.log( _this.selectDataList[i])
                        str+=_this.selectDataList[i].No
                        if(i != _this.selectDataList-1){
                            str += "、"
                        }
                    }
                    let sendData = {};
                    sendData.printerNo = _this.selectprinterNo;
                    sendData.printData = allData;
                    // console.log(printIds)    
                    axios({
                        method: 'post',
                        url: _this.$store.state.defaultHttp+_this.$store.state.print+'printing',
                        data:JSON.stringify(sendData),
                    }).then(function(res){
                        // console.log(res)
                        if(res.data.code == 200){
                             _this.$message({
                                message: "序列号["+ str +"]打印成功",
                                type: 'success'
                            });
                        }
                        _this.dialogVisible = false
                    }).catch(function(err){
                        // toastr.error(resp.message);
                    })

                    // axios({
                    //     method: 'post',
                    //     url: _this.$store.state.defaultHttp+_this.$store.state.productWoUrl+'updateStatus',
                    //     data:printIds,
                    // }).then(function(res){
                    //     console.log(res)
                    //     _this.dialogVisible = false
                    //     _this.loadData()
                    // }).catch(function(err){
                    //     toastr.error(resp.message);
                    // })
                }
                // this.flag=true;
            },
            handleSelectionChange(rows) {
                this.$store.state.printSelectData = rows;
                //实时记录选中的数据
                // setTimeout(()=>{
                //     this.changePageCoreRecordData();
                // }, 50)
            },
            handleSizeChange(val) {
               this.pageSize = val
                
            },
            handleCurrentChange(val) {
                // console.log()
               this.currentPage = val;
            //    this.changePageCoreRecordData();
            //    setTimeout(()=>{
            //             this.setSelectRow();
            //     }, 50)
            //    console.log(this.multipleSelectionAll)
            }
            // setSelectRow() {
            //     if (!this.multipleSelectionAll || this.multipleSelectionAll.length <= 0) {
            //         return;
            //     }
            //     // 标识当前行的唯一键的名称
            //     let idKey = this.idKey;
            //     let selectAllIds = [];
            //     let that = this;
            //     this.multipleSelectionAll.forEach(row=>{
            //         selectAllIds.push(row[idKey]);
            //     })
            //     this.$refs.table.clearSelection();
            //     for(var i = 0; i < this.dataList.length; i++) {                    
            //         if (selectAllIds.indexOf(this.dataList[i][idKey]) >= 0) {
            //             // 设置选中，记住table组件需要使用ref="table"
            //             this.$refs.table.toggleRowSelection(this.dataList[i], true);
            //         }
            //     }
            // },
        //     // 记忆选择核心方法
        //     changePageCoreRecordData () {
        //         console.log(111)
        //         this.multipleSelectionAll = this.AllDataList;
        //         this.$store.state.printSelectData = this.multipleSelectionAll
        //         // 标识当前行的唯一键的名称
        //         let idKey = this.idKey;
        //         let that = this;
        //         // 如果总记忆中还没有选择的数据，那么就直接取当前页选中的数据，不需要后面一系列计算
        //         if (this.multipleSelectionAll.length <= 0) {
        //             this.multipleSelectionAll = this.multipleSelection;
        //             this.$store.state.printSelectData = this.multipleSelectionAll;
        //             return;
        //         }
        //         // 总选择里面的key集合
        //         let selectAllIds = [];
        //         this.multipleSelectionAll.forEach(row=>{
        //             selectAllIds.push(row[idKey]);
        //         })
        //         let selectIds = []
        //         // 获取当前页选中的id
        //         this.multipleSelection.forEach(row=>{
        //             selectIds.push(row[idKey]);
        //             // 如果总选择里面不包含当前页选中的数据，那么就加入到总选择集合里
        //             if (selectAllIds.indexOf(row[idKey]) < 0) {
        //                 that.multipleSelectionAll.push(row);
        //             }
        //         })
        //         let noSelectIds = [];
        //         // 得到当前页没有选中的id
        //         this.dataList.forEach(row=>{
        //             if (selectIds.indexOf(row[idKey]) < 0) {
        //                 noSelectIds.push(row[idKey]);
        //             }
        //         })
        //         noSelectIds.forEach(id=>{
        //             if (selectAllIds.indexOf(id) >= 0) {
        //                 for(let i = 0; i< that.multipleSelectionAll.length; i ++) {
        //                     if (that.multipleSelectionAll[i][idKey] == id) {
        //                         // 如果总选择中有未被选中的，那么就删除这条
        //                         that.multipleSelectionAll.splice(i, 1);
        //                         that.$store.state.printSelectData = that.multipleSelectionAll;
        //                         break;
        //                     }
        //                 }
        //             }
        //         })
        //     if(this.flag){
        //         this.$store.state.printSelectData = this.multipleSelectionAll;
        //     }
            
        //     },
        // },
        // destroyed() {
        //     this.$store.state.printSelectData = [];
        // },
        }
    }
</script>
