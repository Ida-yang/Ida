<template>
    <!-- 不良原因 -->
    <div>
        <div class="grid-content" >
            <el-button type="primary" size="small" @click="handleAdd()">
                新增不良原因
            </el-button>
        </div>
        <div class="searchList">
            <el-select
                @change="changeRejectstype()"
                v-model="searchList.rejectstype"
                placeholder="选择类型">
                <el-option
                v-for="item in options"
                :key="item.id"
                :label="item.rejectstype"
                :value="item.id">
                </el-option>
            </el-select>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.rejectno" placeholder="不良编码"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.rejectcause" placeholder="不良原因"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.category" placeholder="不良类别"></el-input>
        </div>
        <div class="searchList">
            <el-button type="success" size="mini" @click="search()">查询</el-button>
            <el-button type="info" size="mini" @click="reset()">清空</el-button>
        </div>
        <el-table
            :data="badTableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center">
            <el-table-column
                header-align="center"
                align="center"
                prop="rejectno"
                label="不良编码"
                width="160"
                >
            </el-table-column>
            <el-table-column
                prop="rejectcause"
                label="不良原因"
                header-align="center"
                align="center"
                width="200">
            </el-table-column>
            <el-table-column
                prop="rejectstype"
                header-align="center"
                align="center"
                label="不良类型"
                width="80">
                <template slot-scope="scope">
                    <p v-if="scope.row.rejectstype == 0">
                        主机
                    </p>
                    <p v-if="scope.row.rejectstype == 1">
                        原材料
                    </p>
                </template>
            </el-table-column>
            <el-table-column
                prop="category"
                header-align="center"
                align="center"
                label="不良类别"
                width="120">
            </el-table-column>
            <el-table-column label="操作"
                width="180"
                header-align="center"
                align="center">
            <template slot-scope="scope">
                <el-button
                size="mini"
                @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button
                size="mini"
                type="danger"
                @click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog title="新增不良" center :visible.sync="dialogFormVisible" width="47%" :modal="false">
            <el-form :model="newForm">
                <el-form-item label="不良类型" :label-width="formLabelWidth">
                    <el-select
                        v-model="newForm.rejectstype"
                        placeholder="请选择类型"
                        style="width:100%">
                        <el-option
                        v-for="item in options"
                        :key="item.id"
                        :label="item.rejectstype"
                        :value="item.id">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="不良编号" :label-width="formLabelWidth">
                <el-input v-model="newForm.rejectno" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="不良原因" :label-width="formLabelWidth">
                <el-input v-model="newForm.rejectcause" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="不良类别" :label-width="formLabelWidth">
                <el-input v-model="newForm.category" auto-complete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="addBadcause">提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改不良" center :visible.sync="dialogFormVisible2" width="47%" :modal="false">
            <el-form :model="updateFrom">
                <el-form-item label="不良类型" :label-width="formLabelWidth">
                    <el-select
                        v-model="updateFrom.rejectstype"
                        placeholder="请选择类型"
                        style="width:100%">
                        <el-option
                        v-for="item in options"
                        :key="item.id"
                        :label="item.rejectstype"
                        :value="item.id">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="不良编号" :label-width="formLabelWidth">
                <el-input v-model="updateFrom.rejectno" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="不良原因" :label-width="formLabelWidth">
                <el-input v-model="updateFrom.rejectcause" auto-complete="off" ></el-input>
                </el-form-item>
                <el-form-item label="不良类别" :label-width="formLabelWidth">
                <el-input v-model="updateFrom.category" auto-complete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible2 = false">取 消</el-button>
                <el-button type="primary" @click="updateBadcause" >提 交</el-button>
            </div>
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
    .searchList{
        width: 180px;
        margin: 5px 5px 5px 0px;
        float: left;
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'BadCause',
        computed: {
            badTableData(){
                return store.state.badcauseList;
            },
            tableNumber(){
               return store.state.badcauseListnumber;     
            },
            Height(){
                return store.state.maxheight
            }
        },
        props:{
            totalNum:Number,
        },
        store,
        data(){
            return {
                options:[//不良类型
                    {id:0,rejectstype:"主机"},
                    {id:1,rejectstype:"原材料"}
                ],
                searchList:{
                    rejectno:null,
                    rejectcause:null,
                    rejectstype:null,
                    category:null,
                },
                searchListNew:{
                    rejectno:null,
                    rejectcause:null,
                    rejectstype:null,
                    category:null,
                },
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                newForm:{
                    rejectno:null,
                    rejectcause:null,
                    rejectstype:null,
                    category:null,
                },
                updateFrom:{
                    id:null,
                    rejectno:null,
                    rejectcause:null,
                    rejectstype:null,
                    category:null,
                },
                dialogFormVisible: false,
                dialogFormVisible2: false,
                formLabelWidth: '120px',
                maxheight:null,
            }
        },
        mounted() {
            this.reloadTable();
            let _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height; 
        },
        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {};
                if(flag) {
                    if(_this.searchList.rejectstype != null) {
                        searchList.rejectstype = _this.searchList.rejectstype;
                    }
                    if(_this.searchList.rejectno) {
                        searchList.rejectno = _this.DelBlankSpace(_this.searchList.rejectno);
                    }
                    if(_this.searchList.rejectcause) {
                        searchList.rejectcause = _this.DelBlankSpace(_this.searchList.rejectcause);
                    }
                    if(_this.searchList.category) {
                        searchList.category = _this.DelBlankSpace(_this.searchList.category);
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.badcauseUrl+'getByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    _this.$store.state.badcauseList = res.data.result.records;
                    _this.$store.state.badcauseListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    // console.log(err);
                });
            },
            changeRejectstype() {
                this.$options.methods.reloadTable.bind(this)(true);
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
                // this.searchList.rejectstype = [];
                // this.searchList.rejectno = null;
                // this.searchList.rejectcause = null;
                // this.searchList.category = null;
            },
            reset(){
                this.searchList = Object.assign({}, this.searchListNew);
                this.$options.methods.reloadTable.bind(this)(true);
            },
            handleAdd() {
                let options = this.options;
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增不良";
                addOrUpdateData.createForm = [
                    {
                        "label": "不良类型",
                        "inputModel": "rejectstype",
                        "type": "select",
                        "okey": "id",
                        "ovalue": "id",
                        "olabel": "rejectstype",
                        "placeholder": "请选择类型",
                        "options": options,
                        "multiple": false
                    },
                    {"label":"不良编号","inputModel":"rejectno"},
                    {"label":"不良原因","inputModel":"rejectcause"},
                    {"label":"不良类别","inputModel":"category"},
                ];
                addOrUpdateData.setForm = {
                    "category": "",
                    "rejectno": "",
                    "rejectcause": "",
                    "rejectstype": "",
                };
                addOrUpdateData.submitData = {};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.badcauseUrl+'add';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.newForm.rejectno = null;
                // this.newForm.rejectcause = null; 
                // this.newForm.rejectstype = null;
                // this.newForm.category = null;
                // this.dialogFormVisible = true;
            },
            handleEdit(index, row) {
                let options = this.options;
                let addOrUpdateData = {};
                addOrUpdateData.title = "修改不良 ["+ row.rejectcause +"]";
                addOrUpdateData.createForm = [
                    {
                        "label": "不良类型",
                        "inputModel": "rejectstype",
                        "type": "select",
                        "okey": "id",
                        "ovalue": "id",
                        "olabel": "rejectstype",
                        "placeholder": "请选择类型",
                        "options": options,
                        "multiple": false
                    },
                    {"label":"不良编号","inputModel":"rejectno"},
                    {"label":"不良原因","inputModel":"rejectcause"},
                    {"label":"不良类别","inputModel":"category"},
                ];
                addOrUpdateData.setForm = {
                    "category": row.category,
                    "rejectno": row.rejectno,
                    "rejectcause": row.rejectcause,
                    "rejectstype": row.rejectstype,
                };
                addOrUpdateData.submitData = {"id": row.id};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.badcauseUrl+'update';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.updateFrom.id = row.id; 
                // this.updateFrom.rejectno = row.rejectno;
                // this.updateFrom.rejectcause = row.rejectcause; 
                // this.updateFrom.rejectstype = row.rejectstype;
                // this.updateFrom.category = row.category;
                // this.dialogFormVisible2 = true;
            },
            handleDelete(index, row) {
                let _this = this;
                _this.$confirm('是否确认删除不良原因[' + row.rejectcause + ']？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.badcauseUrl+'delete?id=' + row.id,
                    }).then(function(res){
                        if(res.data.code && res.data.code == 200) {
                            _this.$message({
                                message: '删除不良原因成功',
                                type: 'success'
                            });
                            _this.$options.methods.reloadTable.bind(_this)(false);
                        } else {
                            _this.$message({
                                message: res.data.message,
                                type: 'error'
                            });
                        }
                    }).catch(function(err){
                        // console.log(err);
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消删除不良[' + row.rejectcause + ']'
                    });       
                });
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)(false);
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)(false);
            },
            addBadcause(){
                let _this = this;
                let mydata = {};
                mydata.rejectno = this.newForm.rejectno;
                mydata.rejectcause = this.newForm.rejectcause;
                mydata.rejectstype =this.newForm.rejectstype;
                mydata.category =this.newForm.category;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.badcauseUrl+'add',
                    data: JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '新增不良原因成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    // console.log(err)
                })        
            } ,
            updateBadcause(){
                let _this = this;
                let mydata = {};
                mydata.id = this.updateFrom.id;
                mydata.rejectno = this.updateFrom.rejectno;
                mydata.rejectcause = this.updateFrom.rejectcause;
                mydata.rejectstype =this.updateFrom.rejectstype;
                mydata.category =this.updateFrom.category;
                axios({
                    method: 'post',
                    url:  _this.$store.state.defaultHttp+ _this.$store.state.badcauseUrl+'update',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改不良原因成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible2 = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });      
            }  
        },
        
    }
</script>
