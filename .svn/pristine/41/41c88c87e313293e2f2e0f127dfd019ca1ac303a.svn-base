<template>
    <!-- 工艺流程 -->
    <div>
        <div class="grid-content">
            <el-button type="primary" size="small" @click="handleAdd()">
                新增工艺流程
            </el-button>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.code" placeholder="工艺流程编码"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.name" placeholder="工艺流程名称"></el-input>
        </div>
        <el-table
            :data="tableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center">
            <el-table-column
                header-align="center"
                align="center"
                prop="code"
                label="工艺流程编码"
                width="160"
                >
            </el-table-column>
            <el-table-column
                prop="name"
                header-align="center"
                align="center"
                label="工艺流程名称"
                width="160">
            </el-table-column>
            <el-table-column
                prop="remark"
                header-align="center"
                align="center"
                label="描述"
                width="200">
            </el-table-column>
            <el-table-column label="操作"
                width="380"
                header-align="center"
                align="center">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    type="primary"
                    @click="handleSelect(scope.$index, scope.row)">选择生产工序</el-button>
                    <el-button
                    size="mini"
                    type="primary"
                    @click="handleSelectProdu(scope.$index, scope.row)">选择物料</el-button>
                    <el-button
                    size="mini"
                    @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                    <el-button
                    size="mini"
                    type="danger"
                    @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog title="新增工艺流程" :visible.sync="dialogFormVisible" width="47%" :modal="false">
            <el-form :model="newForm">
                <el-form-item label="工艺流程编码" :label-width="formLabelWidth">
                    <el-input v-model="newForm.code" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="工艺流程名称" :label-width="formLabelWidth">
                    <el-input v-model="newForm.name" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="描述" :label-width="formLabelWidth">
                    <el-input v-model="newForm.remark" auto-complete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="addtechProcess">提 交</el-button>
            </div>
        </el-dialog>

        <el-dialog title="修改工艺流程" :visible.sync="dialogFormVisible2" width="47%" :modal="false">
            <el-form :model="updateFrom">
                <el-form-item label="工艺流程编号" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.code" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="工艺流程名称" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.name" auto-complete="off" ></el-input>
                </el-form-item>
                <el-form-item label="描述" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.remark" auto-complete="off" ></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible2 = false">取 消</el-button>
                <el-button type="primary" @click="updatetechProcess" >提 交</el-button>
            </div>
        </el-dialog>

        <el-dialog title="选择生产工序" :visible.sync="dialogFormVisible3" width="47%" :modal="false">
            <div class="drag-box" :modal="selectform">
                <div class="drag-box-item">
                    <div class="item-title" style="background-color:#f1f2f5;border-bottom: 1px solid #80808033;">请选择</div>
                    <draggable v-model="wholeprocess" @remove="handleRemove" :options="dragOptions" style="">
                        <transition-group tag="div" id="wholeprocess" class="item-ul">
                            <div v-for="item in wholeprocess" class="drag-list" :key="item.id" style="height:12px;line-height:12px;">
                                {{item.name}}
                            </div>
                        </transition-group>
                    </draggable>
                </div>
                <div style="height:300px;line-height:300px">
                    <span class="item-icon">
                        <i class="el-icon-d-arrow-right"></i>
                    </span>
                </div>
                &nbsp;&nbsp;&nbsp;
                <div class="drag-box-item selectedItem">
                    <div class="item-title" style="background-color:#f1f2f5;border-bottom: 1px solid #80808033;">已选择</div>
                    <draggable v-model="sortprocess" @remove="handleRemove" :options="dragOptions">
                        <transition-group tag="div" id="sortprocess" class="item-ul">
                            <div v-for="item in sortprocess" class="drag-list" :key="item.id" style="height:12px;line-height:12px;">
                                {{item.name}}
                            </div>
                        </transition-group>
                    </draggable>
                </div>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible3 = false">取 消</el-button>
                <el-button type="primary" @click="selectInfo" >提 交</el-button>
            </div>       
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
    .el-row{
        margin-bottom: 10px;
    }
    .searchList{
        width: 220px;
        margin: 5px 5px 5px 0px;
        float: left;
    }
    .drag-box{
        display: flex;
        user-select: none;
    }
    .drag-box-item {
        flex: 1;
        max-width: 300px;
        min-width: 200px;
        margin-right: 10px;
        border-radius: 6px;
        border: 1px #e1e4e8 solid;
    }
    .item-title{
        padding: 8px 8px 8px 12px;
        font-size: 14px;
        line-height: 1.25;
        color: #24292e;
        font-weight: 400;
    }
    .item-icon{
        border: 1px solid #20a0ff;
        border-radius: 50%;
        padding: 10px;
    }
    .el-icon-d-arrow-right{
        color: #20a0ff;
    }
    .item-ul{
        padding: 0 8px 8px;
        height: 300px;
        overflow-y: scroll;
    }
    .item-ul::-webkit-scrollbar{
        width: 0;
    }
    .selectedItem .drag-list {
        border: 1px #20a0ff solid;
        /* color: #fff */
    }
    .drag-list {
        border: 1px #e1e4e8 solid;
        padding: 10px;
        margin: 5px 0 10px;
        list-style: none;
        background-color: #fff;
        border-radius: 6px;
        cursor: pointer;
        -webkit-transition: border .3s ease-in;
        transition: border .3s ease-in;
    }
    .drag-list:hover {
        border: 1px solid #20a0ff;
    }
    .drag-title {
        font-weight: 400;
        line-height: 25px;
        margin: 10px 0;
        font-size: 22px;
        color: #1f2f3d;
    }
    .ghost-style{
        display: block;
        color: transparent;
        border-style: dashed;
        
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    import draggable from 'vuedraggable'
    export default {
        name:'TechProcessList',
        computed: {
            tableData(){
                return store.state.techProcessList;
            },
            tableNumber(){
               return store.state.techProcessListnumber;     
            },
            Height(){
                return store.state.maxheight;
            },
        },
        props:{
            totalNum:Number,
        },
        components:{
            draggable,
        },
        store,
        data(){
            return {
                searchList:{
                    code:null,
                    name:null,
                },
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                newForm:{
                    code:null,
                    name:null,
                    remark:null,
                },
                updateFrom:{
                    id:null,
                    code:null,
                    name:null,
                    remark:null,
                },
                selectform:{
                    id:null,
                },
                dialogFormVisible: false,
                dialogFormVisible2: false,
                dialogFormVisible3:false,
                formLabelWidth: '120px',
                
                dragOptions:{
                    animation: 120,
                    scroll: true,
                    group: 'sortlist',
                    ghostClass: 'ghost-style'
                },
                sortprocess: [],
                wholeprocess: [],
                maxheight:null,
            }
        },
        beforeCreate(){
            let _this = this;
            this.$nextTick(function () {
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'getByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount
                }).then(function(res){
                    _this.$store.state.techProcessList = res.data.result.records;
                    _this.$store.state.techProcessListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    console.log(err);
                });
            });
        },

        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {}
                if(flag) {
                    if(_this.searchList.code) {
                        searchList.code = _this.searchList.code;
                    }
                    if(_this.searchList.name) {
                        searchList.name = _this.searchList.name;
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'getByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    _this.$store.state.techProcessList = res.data.result.records;
                    _this.$store.state.techProcessListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    console.log(err);
                });
            },
            changeRejectstype() {
                this.$options.methods.reloadTable.bind(this)(true);
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
                this.searchList.code = null;
                this.searchList.name = null;
            },
            handleAdd() {
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增工艺流程";
                addOrUpdateData.createForm = [
                    {"label":"工艺编号","inputModel":"code"},
                    {"label":"工艺名称","inputModel":"name"},
                    {"label":"工艺描述","inputModel":"remark"}];
                addOrUpdateData.setForm = {
                    "code": "",
                    "name": "",
                    "remark": ""};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.techProcessUrl+'add';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.newForm.code = null;
                // this.newForm.name = null; 
                // this.newForm.remark = null;
                // this.dialogFormVisible = true;
            },
            handleSelect(index,row){
                let _this = this;
                let selectInfo = {};
                this.selectform.id=row.id;
                selectInfo.id = row.id;
                selectInfo.sortitem = "produprocesses";
                selectInfo.title = '选择生产工艺';

                axios({
                    method:'get',
                    url: _this.$store.state.defaultHttp+_this.$store.state.productProcessUrl+'getAll?techprocessId='+_this.selectform.id,
                }).then(function(res){
                    selectInfo.wholeprocess = res.data.result;
                }).catch(function(err){
                    console.log(err);
                });
                axios({
                    method:'get',
                    url:_this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'getProduprocessById?id='+_this.selectform.id,
                }).then(function(res){
                    let result=res.data.result;
                    result.forEach((process,index)=>{
                        result[index].name=process.produprocessName;
                        result[index].id=process.produprocessid;
                    })
                    selectInfo.sortprocess = result;
                }).catch(function(err){
                    console.log(err);
                });
                selectInfo.submitURL = _this.$store.state.defaultHttp + _this.$store.state.techProcessUrl+'addTechtoprodu';
                _this.$store.state.selectInfo = selectInfo;
                // console.log(_this.$store.state.selectInfo);
                _this.$router.push({ path: '/selectInfo' });
            },
            handleSelectProdu(index,row){
                let _this = this;
                let selectData = [];
                axios({
                    method:'get',
                    url:_this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'getProductById?techprocessId='+row.id,
                }).then(function(res){
                    if(res.data.result) {
                        let result = res.data.result;
                        result.forEach((process,index) => {
                            result[index].id = process.idProduct;
                        });
                        selectData = result;
                    }
                    axios({
                        method: 'post',
                        url: _this.$store.state.defaultHttp+_this.$store.state.materielUrl+'getAllEndProduct',
                    }).then(function(res){
                        // _this.$store.state.productProcessList = res.data.result;

                        let setOtherData = {};
                        setOtherData.title = "修改 ["+ row.name +"] 的成品";
                        setOtherData.setTable = [
                            {"head":"成品编号","body":"productNo"},
                            {"head":"成品名称","body":"productname"},
                        ];
                        setOtherData.tableData = res.data.result;
                        setOtherData.selectData = selectData;
                        setOtherData.submitDataId = row.id;
                        setOtherData.submitDataName = "products";
                        setOtherData.identifier = "id";
                        setOtherData.notId = true;
                        setOtherData.submitURL = _this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'addProdutotech';
                        _this.$store.state.setOtherData = setOtherData;
                        _this.$router.push({ path: '/setRelationInfo' });
                    }).catch(function(err){
                        // console.log(err);
                    });
                
                }).catch(function(err){
                    console.log(err);
                });
            },
            handleRemove(event){
                // console.log(event);
                this.$message.success('拖拽生产工序成功');
            },
            
            getComponentData() {
                return {
                    on: {
                    change: this.handleChange,
                    input: this.inputChanged,
                    },
                    props: {
                    value: this.activeNames,
                    }
                };
            },
            handleChange() {
                console.log('changed');
            },
            inputChanged(value) {
                this.activeNames = value;
            },
            
            handleEdit(index, row) {
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增工艺流程";
                addOrUpdateData.createForm = [
                    {"label":"工艺编号","inputModel":"code"},
                    {"label":"工艺名称","inputModel":"name"},
                    {"label":"工艺描述","inputModel":"remark"}];
                addOrUpdateData.setForm = {
                    "code": row.code,
                    "name": row.name,
                    "remark": row.remark};
                addOrUpdateData.submitData = {"id": row.id};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.techProcessUrl+'update';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.updateFrom.id = row.id; 
                // this.updateFrom.code = row.code;
                // this.updateFrom.name = row.name; 
                // this.updateFrom.remark = row.remark;
                // this.dialogFormVisible2 = true;
            },
            handleDelete(index, row) {
                let _this = this;
                _this.$confirm('是否确认删除工艺流程[' + row.name + ']？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'delete?id=' + row.id,
                    }).then(function(res){
                        if(res.data.code && res.data.code == 200) {
                            _this.$message({
                                message: '删除工艺流程成功',
                                type: 'success'
                            });
                            _this.$options.methods.reloadTable.bind(_this)(false);
                        } else {
                            _this.$message({
                                message: res.data.message,
                                type: 'error'
                            });
                        }
                    }).catch(function(err){
                        console.log(err);
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消删除工艺流程[' + row.name + ']'
                    });       
                });
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)(false);
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)(false);
            },
            addtechProcess(){
                let _this = this;
                let mydata = {};
                mydata.code = this.newForm.code;
                mydata.name = this.newForm.name;
                mydata.remark = this.newForm.remark;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'add',
                    data: JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '新增工艺流程成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    console.log(err)
                })        
            } ,
            updatetechProcess(){
                let _this = this;
                let mydata = {};
                mydata.id = this.updateFrom.id;
                mydata.code = this.updateFrom.code;
                mydata.name = this.updateFrom.name;
                mydata.remark = this.updateFrom.remark;
                axios({
                    method: 'post',
                    url:  _this.$store.state.defaultHttp+ _this.$store.state.techProcessUrl+'update',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改工艺流程成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible2 = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    console.log(err);
                });      
            },
            selectInfo(){
                let _this = this;
                let mydata = {};
                mydata.id=this.selectform.id;
                mydata.produprocesses=[];
                this.sortprocess.forEach(e => {
                    if(e['name']){
                        mydata.produprocesses.push(e.id);
                    }
                });
                
                axios({
                    method: 'post',
                    url:  _this.$store.state.defaultHttp + _this.$store.state.techProcessUrl+'addTechtoprodu',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '添加生产工艺成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible3 = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    }else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    console.log(err);
                });      
            },
            
            
        },
        mounted () {
            //防止火狐浏览器拖拽的时候以新标签打开
            document.body.ondrop = function (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            var _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height; 
        },
    }
</script>
