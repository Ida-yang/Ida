<template>
    <!-- 非生产性领用出库 -->
    <div>
        <div class="grid-content">
            <el-button type="primary" size="small" @click="printMyData" >打印生产领料单</el-button>
            <el-button type="primary" size="small" @click="export2Excel">打印物料标示卡标签</el-button>
            <el-button type="success" size="small" @click="dialogVisible2=true" >获取U9数据</el-button>
        </div>
        <div class="grid-content searchList "  >
            <el-input v-model="deliverynum" placeholder="出库单号" @keyup.enter.native="selectData()"></el-input>
        </div>
        <div class="grid-content searchList"  >
            <el-select v-model="ordertype"
            @change="selectData"
            clearable placeholder="请选择出库类型">
                <el-option
                v-for="item in options2"
                :key="item.value"
                :label="item.label"
                :value="item.value">
                </el-option>
            </el-select>
        </div>
        <div class="grid-content searchList"  >
            <el-select v-model="getmaterstatus"
            @change="selectData"
            clearable placeholder="请选择订单状态">
                <el-option
                v-for="item in options1"
                :key="item.value"
                :label="item.label"
                :value="item.value">
                </el-option>
            </el-select>
        </div>
        <el-table
            :data="tableData3"
            tooltip-effect="dark"
            @cell-dblclick="CheckTheDetails"
            style="width: 100%"
            border
            :max-height="maxheight"
            :row-key="getRowKeys"
            @selection-change="handleSelectionChange">
            <el-table-column
            type="selection"
            prop="id"
            width="35">
            </el-table-column>
            <el-table-column
            prop="ordertype"
            label="出库类型"
            align="center"
            fixed="left"
            header-align="center"
            width="100">
            </el-table-column>
            <el-table-column
            fixed="left"
            label="出库单号"
            align="center"
            header-align="center"
            width="140">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    style="border:none;color:#3c8dbc"
                    @click="CheckTheDetails(scope.$index, scope.row)">{{ scope.row.ordernum }}</el-button>
                </template>
            </el-table-column>
            <el-table-column
            fixed="left"
            prop="getmaterstatus"
            label="状态"
            header-align="center"
            width="80"
            align="center"
            :formatter="formatter">
            <template slot-scope="scope">
                <el-tag
                :type="scope.row.getmaterstatus === 0 ?'warning':'success'"
                close-transition>{{scope.row.getmaterstatus | formatStatus}}</el-tag>
            </template>
            </el-table-column>
            <el-table-column
            prop="createdate"
            label="领货时间"
            align="center"
            header-align="center"
            width="152">
            </el-table-column>
            <el-table-column
            prop="updatedate"
            label="修改时间"
            align="center"
            header-align="center"
            width="152">
            </el-table-column>
            <el-table-column
            prop="crtdate"
            label="创建时间"
            align="center"
            header-align="center"
            width="152">
            </el-table-column>
            <el-table-column
            prop="customer.name"
            label="客户名称"
            align="center"
            header-align="center"
            width="140">
            </el-table-column>
            <el-table-column
            prop="customer.address"
            label="收货地址"
            :formatter="userFormat"
            align="center"
            header-align="center"
            width="140">
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="currentPage"
            :page-sizes="[10, 20, 50, 100]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog
        title="打印数量"
        :modal="false" 
        center
        :visible.sync="dialogVisible"
        width="30%"
        >
            <span style="margin-left:10%">打印份数</span>
            <el-input-number size="mini" v-model="copiesNum"></el-input-number>
            <span slot="footer" class="dialog-footer">
                <el-button @click="dialogVisible = false">取 消</el-button>
                <el-button type="primary" @click="confirmPrintMyData">确 定</el-button>
            </span>
        </el-dialog>
        <el-dialog
        title="获取U9数据"
        v-loading="loading"
        :visible.sync="dialogVisible2"
        :modal="false"
        center
        width="48%">
            <el-row :gutter="10">
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22">
                <el-date-picker
                        v-model="DateFrom"
                        align="right"
                        type="date"
                        format="yyyy-MM-dd" value-format="yyyy-MM-dd"
                        placeholder="业务日期-开始"
                        :picker-options="pickerOptions1">
                    </el-date-picker>
                    <el-date-picker
                        v-model="DateTo"
                        align="right"
                        type="date"
                        format="yyyy-MM-dd" value-format="yyyy-MM-dd"
                        style="margin=left:10px;"
                        placeholder="业务日期-结束"
                        :picker-options="pickerOptions1">
                    </el-date-picker>
                </el-col>
                <el-col :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:12px">
                    <el-input v-model="CustomerName" placeholder="客户名称" style="width:220px"></el-input>
                    <el-input v-model="DocNo" placeholder="出货单号" style="width:220px"></el-input>
                </el-col>
                <el-col :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:12px">
                    <el-input v-model="OrderNo" placeholder="订单号" style="width:220px"></el-input>
                    <el-input v-model="CreatBy" placeholder="制单人" style="width:220px"></el-input>
                </el-col>
            </el-row>
            <span slot="footer" class="dialog-footer">
                <el-button type="info" @click="dialogVisible = false">重 置</el-button>
                <el-button type="success" @click="refresh" >获取U9数据</el-button>
                <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
            </span>
        </el-dialog>
        <el-dialog
        :title="U9Title"
        :modal="false" 
        center
        :visible.sync="dialogVisible3"
        style="max-height:55%"
        width="55%">
            <el-row :gutter="10">
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22">
                   <span>获取到数据数量：</span><span>{{successNumber}}</span>
                </el-col>
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:30px;"  v-if="Isshow">
                   <span>重复数量：</span><span>{{failureNumber}}</span>
                </el-col>
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:30px;" v-if="Isshow">
                   <span>重复单号（请先作废）:</span>
                   <p style="margin-left:40px;margin-top:10px">{{failureStr}}</p>
                </el-col>
            </el-row>
            <span slot="footer" class="dialog-footer" style="text-align: center">
                <el-button type="primary" @click="dialogVisible3 = false">关  闭</el-button>
            </span>
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        margin-top: 20px;
        text-align: right
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-table {
        font-size: 12px!important;
        
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
    
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    import FileSaver from 'file-saver'
    import XLSX from 'xlsx'
    export default {
        name:'OutboundOrder',
        props:{
            totalNum:Number,
        },
        store,
        filters: {
            formatStatus: function (val) {
                return val == 0 ? '未出库':'已出库';
            },
        },
        data(){
            return {
                pickerOptions1: {
                    disabledDate(time) {
                        return time.getTime() > Date.now();
                    },
                    shortcuts: [{
                        text: '今天',
                        onClick(picker) {
                        picker.$emit('pick', new Date());
                        }
                    }, {
                        text: '昨天',
                        onClick(picker) {
                        const date = new Date();
                        date.setTime(date.getTime() - 3600 * 1000 * 24);
                        picker.$emit('pick', date);
                        }
                    }, {
                        text: '一周前',
                        onClick(picker) {
                        const date = new Date();
                        date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);
                        picker.$emit('pick', date);
                        }
                    }]
                },
                // 获取row的key值
                getRowKeys(row) {
                    return row.id;
                },
                deliverynum:null,
                maxheight:null,
                dialogVisible: false,
                dialogVisible2: false,
                dialogVisible3: false,
                U9Title:"失败",
                DateFrom :'',//开始时间
                DateTo  :'',//结束时间
                CustomerName:null,//客户名称
                DocNo:null,//出货单号
                OrderNo:null,//订单号
                CreatBy:null,//制单人

                data:[],
                data1:[],
                loading:false,
                allData : [],
                printIds : [],
                indexNumber:null,
                successNumber:0,
                failureNumber:0,
                failureStr:'',
                ordernum:null,
                customname:null,
                starttime:null,
                endtime:null,
                snnum:null,
                copiesNum:null,
                Isshow:true,
                selectedData: [],
                inputData : {},
                currentPage:1,//默认第一页
                pageSize:10,//默认10条
                tableData3: [],
                tableNumber:null,
                dataTime:null,
                pickerOptions2: {
                    shortcuts: [{
                        text: '最近一周',
                        onClick(picker) {
                        const end = new Date();
                        const start = new Date();
                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
                        picker.$emit('pick', [start, end]);
                        }
                    }, {
                        text: '最近一个月',
                        onClick(picker) {
                        const end = new Date();
                        const start = new Date();
                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                        picker.$emit('pick', [start, end]);
                        }
                    }, {
                        text: '最近三个月',
                        onClick(picker) {
                        const end = new Date();
                        const start = new Date();
                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                        picker.$emit('pick', [start, end]);
                        }
                    }]
                },
                ordertype:'',
                getmaterstatus:'',
                options1: [{
                        value: '0',
                        label: '未出库'
                    }, {
                        value: '1',
                        label: '已出库'
                }],
                options2: [{
                        value: '销售',
                        label: '销售出库'
                    }, {
                        value: '借用',
                        label: '借用出库'
                    }, {
                        value: '其他',
                        label: '其他出库'
                }],
                
            }
        },
        computed:{
            Height(){
                return store.state.maxheight
            }
        },
        mounted(){
            let _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;   
        },
        
        methods: {
            userFormat(row, column, cellValue, index){
                if(cellValue != null){
                    return cellValue
                }else{
                    return '未填写'
                }
            },
            //导出出库单
            export2Excel() {
                let _this=this;
                if(_this.selectedData.length == 0 ){
                    _this.$message({
                        message: '请先选择出库单！',
                        type: 'warning'
                    });
                    return
                }
                let selectId='';
                for(var i=0;i<_this.selectedData.length;i++){
                    if(i == 0) {
                        selectId +="?id=" + _this.selectedData[i].id;
                    } else {
                        selectId +="&id=" + _this.selectedData[i].id;
                    }
                }
                let thisUrl = _this.$store.state.defaultHttp +_this.$store.state.orderUrl +"export"+selectId;
                axios({
                    method: 'get',
                    url:thisUrl,
                }).then(function(res){
                    let Arr = res.data.result;
                    _this.data = [];
                    _this.data1 = [];
                    for(var i = 0; i < Arr.length; i++) {
                        var obj = {};
                        obj.deliverynum = Arr[i].deliverynum?Arr[i].deliverynum:"";
                        obj.productno = Arr[i].productno?Arr[i].productno:"";
                        obj.snnum  = Arr[i].snnum?Arr[i].snnum:"";
                        if(Arr[i].deliveryid) {
                            _this.data.push(obj);
                        } else {
                            _this.data1.push(obj);
                        }
                    }
                    
                    require.ensure([], () => {
                        const { export_json_to_excel } = require('../../../../vendor/Export2Excel');
                        let tHeader = ['出库单', '产品编号', '序列号']; //对应表格输出的title
                        let filterVal = ['deliverynum', 'productno', 'snnum']; // 对应表格输出的数据
                        let list = _this.data;
                        let list1 = _this.data1;
                        if(list.length == 0 && list1.length == 0) {
                            _this.$message({
                                message: '选择的单据中没有序列号！',
                                type: 'warning'
                            });
                            return;
                        }
                        let newTime = _this.getNowFormatDate();
                        let Todata = _this.formatJson(filterVal, list);
                        let Todata1 = _this.formatJson(filterVal, list1);
                        export_json_to_excel(tHeader, Todata, tHeader, Todata1, '出库单序列号'+newTime); //对应下载文件的名字
                    })
                }).catch(function(err){
                    // console.log(err)
                })
            },
            getNowFormatDate() {
                var date = new Date();
                var seperator1 = "-";
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                var strDate = date.getDate();
                if (month >= 1 && month <= 9) {
                    month = "0" + month;
                }
                if (strDate >= 0 && strDate <= 9) {
                    strDate = "0" + strDate;
                }
                var currentdate = year + seperator1 + month + seperator1 + strDate;
                return currentdate;
            },
            formatJson(filterVal, jsonData) {
                return jsonData.map(v => filterVal.map(j => v[j]))
            },
            //获取U9数据
            refresh(){
                let _this = this;
                _this.loading = true;
                if(_this.MoDocNo == undefined || _this.MoDocNo == "") {
                    if(!_this.DateFrom) {//开始日期为空
                        this.$message({
                            message: '请选择开始日期',
                            type: 'warning'
                        });
                        return;
                    }
                    if(!_this.DateTo) {//结束日期为空
                        this.$message({
                            message: '请选择结束日期',
                            type: 'warning'
                        });
                        return;
                    }
                }
                if(_this.DateFrom && _this.DateTo) {
                    var DateFrom = Date.parse(_this.DateFrom)/1000/60/60/24;
                    var DateTo = Date.parse(_this.DateTo)/1000/60/60/24;
                    
                    if(DateTo-DateFrom > 30) {
                        this.$message({
                            message: '起止日期不能超过30天',
                            type: 'warning'
                        });
                        return;
                    } else if(DateTo-DateFrom < 0) {
                        this.$message({
                            message: '开始日期不能在结束日期后',
                            type: 'warning'
                        });
                        return;
                    } else {
                        _this.DateFrom = _this.DateFrom + " 00:00:00";
                        _this.DateTo = _this.DateTo + " 23:59:59";
                    }
                }
                let sendData = {};
                    sendData.DateFrom = _this.DateFrom
                    sendData.DateTo  = _this.DateTo
                    sendData.CustomerName = _this.CustomerName
                    sendData.DocNo = _this.DocNo
                    sendData.OrderNo = _this.OrderNo
                    sendData.CreatBy = _this.CreatBy
                var thisUrl = _this.$store.state.defaultHttp +"getU9Data/getDeliveryOrderByCodi";
                axios({
                        method: 'post',
                        url:thisUrl,
                        data:JSON.stringify(sendData),
                    }).then(function(res){
                        if(res.data.code == 200){
                            _this.successNumber = res.data.result.successcount
                            _this.failureNumber = res.data.result.errorcount
                            let dataArr=res.data.result.data
                            for(var i=0 ; i<dataArr.length;i++){
                                _this.failureStr += '  [  '+dataArr[i]+'  ]  '
                            }
                            _this.DateFrom=null
                            _this.DateTo=null
                            _this.loading = false;
                            if(res.data.result.errorcount == 0){
                                _this.Isshow=false;
                                _this.U9Title = "成功"
                            }
                            _this.dialogVisible2 = false;
                            _this.dialogVisible3=true;
                        }
                        
                    }).catch(function(err){
                        // console.log(err)
                    })
            },
            //作废出库单
            cancelOrder(){
                let _this=this;
                if(_this.selectedData.length == 0 ){
                    _this.$message({
                        message: '请选择需要作废的出库单号',
                        type: 'warning'
                    });
                    return
                }
                if(_this.selectedData.length > 1 ){
                    _this.$message({
                        message: '请选择单个出库单号进行该操作',
                        type: 'warning'
                    });
                    return
                }
                
                this.$confirm('是否作废['+_this.selectedData[0].deliverynum+']此出库单号?', '提示', {
                    cancelButtonText: '取消',
                    confirmButtonText: '确定',
                    type: 'warning'
                }).then(() => {
                    let Data= {}
                    Data.id = _this.selectedData[0].id;
                    Data.state = _this.selectedData[0].state;
                    let JsonData=[];
                    JsonData.push(Data)
                    axios({
                        method: 'post',
                        url: _this.$store.state.defaultHttp+_this.$store.state.orderUrl+'markDelete',
                        data:JSON.stringify(JsonData),
                    }).then(function(res){
                        if(res.data.code==200){
                            _this.$message({
                                type: 'success',
                                message: '作废成功!'
                            });
                            _this.tableData3 = null
                            _this.tableNumber = null
                            _this.selectDataModel(1,10,false)
                        }
                        
                    }).catch(function(err){
                        // console.log(err)
                    })
                    
                }).catch(() => {
                    _this.$message({
                        type: 'info',
                        message: '已取消作废操作'
                    });          
                });
            },
            confirmPrintMyData(){
                if(this.copiesNum == 0){
                    this.$message({
                        message: '打印份数有误',
                        type: 'warning'
                    });
                }else{
                    for(var i = 0; i < this.selectedData.length; i++) {
                        for (var j = 0; j < this.copiesNum; j++) {
                            var obj = this.selectedData[i];
                            this.allData.push(obj);
                        }
                        let printId = {};
                        printId.id = this.selectedData[i].id;
                        printId.status = 1;
                        this.printIds.push(printId);
                    }
                    window.external.ClickPrint(JSON.stringify(this.allData));
                    let _this = this;
                    axios({
                        method: 'post',
                        url: _this.$store.state.defaultHttp+_this.$store.state.orderUrl+'updateStatus',
                        data:JSON.stringify(_this.printIds),
                    }).then(function(resp, status, xhr){
                        _this.dialogVisible = false
                    }).catch(function(err){
                        toastr.error(resp.message);
                    })
                }
            },
            printMyData(){
                if(this.selectedData.length == 0){
                    this.$message({
                        message: '请先选择工单',
                        type: 'warning'
                    });
                }else{
                    this.dialogVisible = true
                }
            },
            selectTime(){
                this.starttime = this.dataTime[0]
                this.endtime = this.dataTime[1]
            },
            selectDataModel(page,count,selectsuccess){
                let _this = this;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.techprocess+'getByPage?recentPage='+page+'&recordCount='+count,
                    data:_this.inputData,
                }).then(function(res){
                    if(res.data.code == 200){
                        _this.tableData3 = res.data.result.records
                        _this.tableNumber = res.data.result.totalRecords
                        if(selectsuccess){
                            if(_this.inputData !== undefined){
                                _this.$message({
                                    message: '查询成功',
                                    type: 'success'
                                })
                            }     
                        }
                    }else if(res.data.code == 500){
                         _this.$message({
                                message: res.data.message,
                                type: 'warning'
                                })
                    }
                    
                }).catch(function(err){
                    // console.log(err)
                })
            },
            selectData(){
                this.inputData.ordernum = this.deliverynum;
                this.inputData.getmaterstatus  = this.getmaterstatus ;
                this.inputData.ordertype = this.ordertype;
                this.selectDataModel(1,10,true)
                this.deliverynum =null;
                this.getmaterstatus = null;
                this.ordertype = null;
            },
            CheckTheDetails(index, row){
                this.$store.state.orgId = ""
                this.$store.state.orgId = row.id;
                this.$router.push({ path: '/OrderDetails' })
            },
            formatter(row, column) {
                return row.address;
            },
            handleSelectionChange(rows) {
                this.selectedData = [];
                if (rows) {
                    rows.forEach(row => {
                        if (row) {
                            this.selectedData.push(row);
                        }
                    });
                }
            },
            handleSizeChange(val) {
                this.selectDataModel(1,val,false)
                _this.pageSize = val;
                
            },
            handleCurrentChange(val) {
                this.selectDataModel(val,this.pageSize,false)
            },
    },
        created(){
            this.selectDataModel(1,10,null)
        },
        
    }
</script>
