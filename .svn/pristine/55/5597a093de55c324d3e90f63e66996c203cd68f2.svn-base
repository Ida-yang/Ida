<template>
    <div>
        <h3 style="text-align:left;">{{setOtherData.title}}</h3>
        <el-table
            ref="multipleTable"
            :data="tableData"
            border
            :max-height="maxheight"
            tooltip-effect="dark"
            :row-key="getRowKeys"
            @selection-change="handleSelectionChange"
            style="width: 100%;margin-top:20px;"
            >
            <el-table-column
                type="selection"
                align="center"
                header-align="center"
                :prop="setOtherData.identifier"
                :reserve-selection="true"
                width="55">
            </el-table-column>
            <el-table-column 
                :width="index==0?150:(index+1)*100"
                align="center"
                header-align="center"
                v-for="(item, index) in setOtherData.setTable"
                :label="item.head"
                :key="item.body"
                :prop="item.body">
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 20, 50, 100]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <div style="display:inline;margin:10px;">
            <el-button size="mini" @click="closeTag">取 消</el-button>
            <el-button size="mini" type="primary" @click="submit">提 交</el-button>
        </div>
    </div>
</template>
<style>
    .numberPage {
        display: inline;
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
    }
</style>
<script>
    import store from '../../../../store/store'
    import {mapState} from 'vuex'
    import axios from 'axios'
    import bus from '../../bus';
    export default {
        name:'setRelationInfo',
        comptude:{  
            // tableData(){
            //     return store.state.setOtherData.tableData;
            // },
            
        },
        data(){
            return {
                setOtherData: {"title" : null},
                tableData: null,
                recentPage: 1,//默认第一页
                recordCount: 10,//默认10条
                // 获取row的key值
                getRowKeys(row) {
                    if(row.id) {
                        return row.id;
                    } else if(row.functionId) {
                        return row.functionId;
                    } else if(row.userId) {
                        return row.userId;
                    } else if(row.roleId) {
                        return row.roleId;
                    } else {
                        return "";
                    }
                    
                },
                selectData: null,
                tableNumber: null,
                maxheight:null,
            }
        },
        mounted() {
            this.loadData();
            let clientHeight = document.documentElement.clientHeight;
            console.log(clientHeight);
            this.maxheight = clientHeight - 200;
        },
        methods:{
            loadData() {
                this.setOtherData = this.$store.state.setOtherData;
                this.tableNumber = this.setOtherData.tableData.length;  

                let tableData = this.setOtherData.tableData;
                let recentPage = this.recentPage;
                let recordCount = this.recordCount;
                this.tableData = tableData.slice((recentPage-1)*recordCount,recentPage*recordCount);

                let selectData = this.setOtherData.selectData;
                let identifier = this.setOtherData.identifier;
                this.selectData = [];
                this.$refs.multipleTable.clearSelection();
                if(selectData && selectData.length != 0) {
                    selectData.forEach(select => {
                        tableData.forEach(every => {
                            if(select[identifier] == every[identifier]) {
                                this.$refs.multipleTable.toggleRowSelection(every);
                            }
                        });
                    });
                } 
            },
            handleCurrentChange(val) {
                this.recentPage = val;
                this.$options.methods.loadData.bind(this)();
            },
            handleSizeChange(val) {
                this.recordCount = val;
                this.$options.methods.loadData.bind(this)();
            },
            handleSelectionChange(rows) {
                this.selectData = [];
                if (rows) {
                    rows.forEach(row => {
                        if (row) {
                            this.selectData.push(row);
                        }
                    });
                }
                // console.log(this.selectData);
            },
            submit() {
                let _this = this;
                let rows = [];
                let setOtherData = _this.$store.state.setOtherData;
                _this.selectData.forEach(select => {
                    let row = {};
                    if(!setOtherData.notId) {//提交的数组是否有ID
                        row[setOtherData.identifier] = select[setOtherData.identifier];
                    } else {
                        row = null;
                        row = select[setOtherData.identifier];
                        rows.push(row);
                        return;
                    }
                    
                    if(setOtherData.code) {//提交的数组是否有code
                        row[setOtherData.code] = select[setOtherData.code];
                    } else {
                        row.code = select.code;
                    }
                    rows.push(row);
                });
                let submitData = {};
                if(setOtherData.submitDataId) {//提交的数据是否有id
                    submitData.id = setOtherData.submitDataId;
                }
                if(setOtherData.submitDataName) {//提交的数据的数组是否有名字
                    submitData[setOtherData.submitDataName] = rows;
                }
                if(!setOtherData.submitDataId && !setOtherData.submitDataName) {//提交的数据为无id无名字的数组
                    submitData = null;
                    submitData = rows;
                }
                
                axios({
                    method: 'post',
                    url: _this.setOtherData.submitURL,
                    data: JSON.stringify(submitData)
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改成功',
                            type: 'success'
                        });
                        _this.closeTag();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    console.log(err);
                }); 
            },
            closeTag() {
                let tagsList = this.$store.state.tagsList;
                let index;
                tagsList.forEach((element, i) => {
                    if(element.name == this.$options.name) {
                        index = i;
                    }
                });
                const delItem = this.$store.state.tagsList.splice(index, 1)[0];
                const item = this.$store.state.tagsList[index] ? this.$store.state.tagsList[index] : this.$store.state.tagsList[index - 1];
                if (item) {
                    delItem.path === this.$route.fullPath && this.$router.push(item.path);
                }else{
                    this.$router.push('/welcome');
                }
            }
        }
        
    }
</script>
