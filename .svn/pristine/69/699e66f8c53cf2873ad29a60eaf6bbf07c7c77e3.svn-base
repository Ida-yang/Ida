<template>
<!-- 成品质检 -->
    <div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.serialnumber" placeholder="序列号"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.puwomate" placeholder="物料"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.rejects" placeholder="不良原因"></el-input>
        </div>
        <el-table
            :data="tableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center;margin-top:10px">
            <el-table-column
                prop="serialnumber"
                header-align="center"
                align="center"
                label="序列号"
                width="180">
                <!-- <template slot-scope="scope">
                    <el-button
                    size="mini"
                    style="border:none;color:#3c8dbc"
                    @click="CheckTheDetails(scope.$index, scope.row)">{{ scope.row.ordernumber }}</el-button>
                </template> -->
            </el-table-column>
            <el-table-column
                prop="puwomate"
                label="物料"
                header-align="center"
                align="center"
                width="160">
            </el-table-column>
            <el-table-column
                prop="userid"
                header-align="center"
                align="center"
                label="记录人"
                width="120">
            </el-table-column>
            <el-table-column
                prop="rejectcause"
                header-align="center"
                align="center"
                label="不良原因"
                width="180">
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'FinishedProductQualityInspection',
        computed: {
            tableData(){
                return store.state.incomeQISList;
            },
            tableNumber(){
               return store.state.incomeQISListnumber;     
            },
            Height(){
                return store.state.maxheight;
            },
        },
        props:{
            totalNum:Number,
        },
        store,
        data(){
            return {
                searchList:{
                },
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                maxheight:null,
            }
        },
        mounted() {
            this.reloadTable();
            let _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;
        },
        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {}
                if(flag) {
                    if(_this.searchList.ordernumber) {
                        searchList.ordernumber = _this.searchList.ordernumber;
                    }
                    if(_this.searchList.puwomate) {
                        searchList.puwomate = _this.searchList.puwomate;
                    }
                    if(_this.searchList.rejectcause) {
                        searchList.rejectcause = _this.searchList.rejectcause;
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.incomeQISUrl+'selectPurchqaorderGetByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    _this.$store.state.incomeQISList = res.data.result.records;
                    _this.$store.state.incomeQISListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    console.log(err);
                });
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
                this.searchList.ordernumber = null;
                this.searchList.puwomate = null;
                this.searchList.rejectcause = null;
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            // CheckTheDetails(index, row){
            //     this.$store.state.orgId = ""
            //     this.$store.state.orgId = row.id;
            //     this.$router.push({ path: '/ModalShiftDetails' })
            // },
            // rowClick(row, event, column) {
            //     this.$options.methods.CheckTheDetails.bind(this)(null, row);
            // }
        },
        
    }
</script>
