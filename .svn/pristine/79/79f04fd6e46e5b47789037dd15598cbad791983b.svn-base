<template>
<!-- 仓库资料 -->
    <div>
        <div class="grid-content">
            <el-button type="primary" size="small" @click="handleAdd()">
                新增仓库
            </el-button>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.ckNo" placeholder="仓库编码"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.ckName" placeholder="仓库名称"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.address" placeholder="仓库类型"></el-input>
        </div>
        <el-table
            :data="ckTableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center;margin-top:10px">
            <el-table-column
                header-align="center"
                align="center"
                prop="ckNo"
                label="仓库编号"
                width="180"
                >
            </el-table-column>
            <el-table-column
                prop="ckName"
                label="仓库名称"
                header-align="center"
                align="center"
                width="220">
            </el-table-column>
            <el-table-column
                prop="address"
                header-align="center"
                align="center"
                label="仓库类型"
                width="120">
            </el-table-column>
            <el-table-column
                prop="ckCatId"
                header-align="center"
                align="center"
                label="仓库类别"
                width="120">
                <template slot-scope="scope">
                    {{scope.row.ckCatId | formatCkCatId}}
                </template>
            </el-table-column>
            <el-table-column label="操作"
                width="160"
                header-align="center"
                align="center">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                    <el-button
                    size="mini"
                    type="danger"
                    @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'WarehouseData',
        computed: {
            ckTableData(){
                return store.state.warehouseList;
            },
            tableNumber(){
               return store.state.warehouseListnumber;     
            },
            Height(){
                return store.state.maxheight;
            },
        },
        filters: {
            formatCkCatId: function (val) {
                return val == 0 ? '成品仓' : val== 1 ?  '原材料仓' : val== 2 ?  '其他无储位仓' : "未知类别";
            },
        },
        props:{
            totalNum:Number,
        },
        store,
        data(){
            return {
                searchList:{
                    ckNo:null,
                    ckName:null,
                    address:null,
                },
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                dialogFormVisible2: false,
                dialogFormVisible: false,
                formLabelWidth: '120px',
                maxheight:null,

                ckCatId: [//仓库类别
                    {"id": 0, "name": "成品仓"},
                    {"id": 1, "name": "原材料仓"},
                    {"id": 2, "name": "其他无储位仓"},
                ],
            }
        },
        mounted() {
            this.reloadTable();
            let _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;
        },
        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {}
                if(flag) {
                    if(_this.searchList.ckNo) {
                        searchList.ckNo = _this.searchList.ckNo;
                    }
                    if(_this.searchList.ckName) {
                        searchList.ckName = _this.searchList.ckName;
                    }
                    if(_this.searchList.address) {
                        searchList.address = _this.searchList.address;
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'getByPageByWhere?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    _this.$store.state.warehouseList = res.data.result.records;
                    _this.$store.state.warehouseListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    console.log(err);
                });
            },
            handleAdd() {
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增仓库";
                // let ckCatId = [
                //     {"id": 0, "name": "成品仓"},
                //     {"id": 1, "name": "原材料仓"},
                //     {"id": 2, "name": "其他无储位仓"},
                // ];
                addOrUpdateData.createForm = [
                    {"label":"仓库编号","inputModel":"ckNo"},
                    {"label":"仓库名称","inputModel":"ckName"},
                    {"label":"仓库类型","inputModel":"address"},
                    {
                        "label": "仓库类别",
                        "inputModel": "ckCatId",
                        "type": "select",
                        "okey": "id",
                        "ovalue": "id",
                        "olabel": "name",
                        "placeholder": "请选择类别",
                        "options": this.ckCatId,
                        "multiple": false
                    }
                ];
                addOrUpdateData.setForm = {
                    "ckNo": "",
                    "ckName": "",
                    "address": "",
                    "ckCatId": "",
                };
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.warehouseUrl+'add';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
            },
            handleEdit(index, row) {
                let addOrUpdateData = {};
                addOrUpdateData.title = "修改仓库 ["+row.ckName+ "]";
                addOrUpdateData.createForm = [
                    {"label":"仓库编号","inputModel":"ckNo"},
                    {"label":"仓库名称","inputModel":"ckName"},
                    {"label":"仓库类型","inputModel":"address"},
                    {
                        "label": "仓库类别",
                        "inputModel": "ckCatId",
                        "type": "select",
                        "okey": "id",
                        "ovalue": "id",
                        "olabel": "name",
                        "placeholder": "请选择类别",
                        "options": this.ckCatId,
                        "multiple": false
                    }
                ];
                addOrUpdateData.setForm = {
                    "ckNo": row.ckNo,
                    "ckName": row.ckName,
                    "address": row.address,
                    "ckCatId": row.ckCatId
                };
                addOrUpdateData.submitData = {"ckId": row.ckId};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.warehouseUrl+'updateCk';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
            },
            handleDelete(index, row) {
                let _this = this;
                _this.$confirm('是否确认删除仓库[' + row.ckName + ']？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'deleteCk?ckId=' + row.ckId + "&state=1",
                    }).then(function(res){
                        if(res.data.code && res.data.code == 200) {
                            _this.$message({
                                message: '删除仓库成功',
                                type: 'success'
                            });
                            _this.$options.methods.reloadTable.bind(_this)();
                        } else {
                            _this.$message({
                                message: res.data.message,
                                type: 'error'
                            });
                        }
                    }).catch(function(err){
                        console.log(err);
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消删除仓库[' + row.ckName + ']'
                    });       
                });
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
                this.searchList.ckNo = null;
                this.searchList.ckName = null;
                this.searchList.address = null;
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)();
            }  
        },
        
    }
</script>
