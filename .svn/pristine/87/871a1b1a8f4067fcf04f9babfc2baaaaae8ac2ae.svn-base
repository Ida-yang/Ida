<template>
    <div>
        <el-row :gutter="10">
            <el-col :xs="4" :sm="4" :md="3" :lg="2" :xl="1">
                <div class="grid-content" style=" line-height: 32px;;height:32px ;">
                    角色权限管理
                </div>
            </el-col>
            <el-col :xs="4" :sm="6" :md="8" :lg="9" :xl="11">
                <div class="grid-content">
                    <el-button type="primary" size="small" @click="dialogFormVisible = true">
                        新增角色
                    </el-button>
                </div>
            </el-col>
        </el-row>
        <el-table
            :data="roleTableData.slice(0,recentPage*recordCount)"
            max-height="450"
            border
            style="width: 100% ;text-align: center">
            <el-table-column
                header-align="center"
                align="center"
                prop="code"
                label="角色编号"
                width="120"
                >
            </el-table-column>
            <el-table-column
                prop="name"
                label="角色名称"
                header-align="center"
                align="center"
                width="120">
            </el-table-column>
            <el-table-column
                prop="description"
                header-align="center"
                align="center"
                label="角色描述"
                width="200">
            </el-table-column>
            <el-table-column label="操作"
                width="400"
                header-align="center"
                align="center">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                    <el-button
                    size="mini"
                    type="warning"
                    @click="handleSetPowers(scope.$index, scope.row)">修改权限</el-button>
                    <el-button
                    size="mini"
                    type="warning"
                    @click="handleSetUsers(scope.$index, scope.row)">修改用户组</el-button>
                    <el-button
                    size="mini"
                    type="danger"
                    @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog title="新增角色" :visible.sync="dialogFormVisible" width="47%" :modal="false">
            <el-form :model="newForm">
                <el-form-item label="角色编号" :label-width="formLabelWidth">
                <el-input v-model="newForm.addCode" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="角色名称" :label-width="formLabelWidth">
                <el-input v-model="newForm.addName" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="角色描述" :label-width="formLabelWidth">
                <el-input v-model="newForm.addDescription" auto-complete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="addRole">提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改角色" :visible.sync="dialogFormVisible1" width="47%" :modal="false">
            <el-form :model="updateFrom">
                <el-form-item label="角色编号" :label-width="formLabelWidth">
                <el-input v-model="updateFrom.newCode" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="角色名称" :label-width="formLabelWidth">
                <el-input v-model="updateFrom.newName" auto-complete="off" ></el-input>
                </el-form-item>
                <el-form-item label="角色描述" :label-width="formLabelWidth">
                <el-input v-model="updateFrom.newDescription" auto-complete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible1 = false">取 消</el-button>
                <el-button type="primary" @click="updateRole" >提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改权限" :visible.sync="dialogFormVisible2" width="55%" :modal="false">
            <el-table
                :data="powersTableData.slice((recentPage2-1)*recordCount2,recentPage2*recordCount2)"
                ref="selectPowers"
                max-height="450"
                border
                style="text-align: center">
                <el-table-column
                    type="selection"
                    header-align="center"
                    width="55">
                </el-table-column>
                <el-table-column
                    prop="functionNo"
                    label="权限编码"
                    header-align="center"
                    align="center"
                    width="120">
                </el-table-column>
                <el-table-column
                    prop="description"
                    header-align="center"
                    align="center"
                    label="权限名称"
                    width="200">
                </el-table-column>
            </el-table>
            <div class="block numberPage">
                <el-pagination
                    @size-change="handleSizeChange2"
                    @current-change="handleCurrentChange2"
                    :current-page="recentPage2"
                    :page-sizes="[10, 15, 20, 25]"
                    :page-size="10"
                    layout="total, sizes, prev, pager, next, jumper"
                    :total="tableNumber2">
                </el-pagination>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible2 = false">取 消</el-button>
                <el-button type="primary" @click="updatePowers">提 交</el-button>
            </div>
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        margin-top: 20px;
        text-align: right
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
    .el-dialog {
        margin-left: 250px;
    }
</style>

<script>
    import store from '../../../store/store'
    import axios from 'axios'
    export default {
        name:'RoleAndManagement',
        computed: {
            roleTableData(){
                return store.state.roleList;
            },
            tableNumber(){
               return store.state.roleListnumber;     
            },
            powersTableData(){
                return store.state.powersList;
            },
            tableNumber2(){
               return store.state.powersListnumber;     
            }
        },
        props:{
            totalNum:Number,
        },
        store,
        data(){
            return {
                code: null,
                description: null,
                name: null,
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                newForm:{
                    addCode: null,
                    addName: null,
                    addDescription: null,
                },
                updateFrom:{
                    roleId: null,
                    newCode: null,
                    newName: null,
                    newDescription: null,
                },
                dialogFormVisible: false,
                dialogFormVisible1: false,
                dialogFormVisible2: false,
                recentPage2: 1,
                recordCount2: 10,
                formLabelWidth: '120px'
            }
        },
        beforeCreate(){
            let _this = this;
            this.$nextTick(function () {
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'getByPage?recentPage='+this.recentPage+'&recordCount='+this.recordCount
                }).then(function(res){
                    _this.$store.state.roleList = res.data.result.records;
                    _this.$store.state.roleListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    console.log(err);
                });
            });
        },
        methods: {
            reloadTable() {
                let _this = this;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'getByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount
                }).then(function(res){
                    if(res.data && res.data.code == 200) {
                        _this.$store.state.roleList = res.data.result.records;
                        _this.$store.state.roleListnumber = res.data.result.totalRecords;
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                    
                }).catch(function(err){
                    console.log(err);
                });
            },
            handleEdit(index, row) {
                this.updateFrom.roleId = row.roleId; 
                this.updateFrom.newCode = row.code;
                this.updateFrom.newName = row.name; 
                this.updateFrom.newDescription = row.description;
                this.dialogFormVisible1 = true;
            },
            handleDelete(index, row) {
                let _this = this;
                _this.$confirm('是否确认删除角色[' + row.name + ']？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'delete?roleId=' + row.roleId,
                    }).then(function(res){
                        if(res.data.code && res.data.code == 200) {
                            _this.$message({
                                message: '删除角色成功',
                                type: 'success'
                            });
                            _this.$options.methods.reloadTable.bind(_this)();
                        } else {
                            _this.$message({
                                message: res.data.message,
                                type: 'error'
                            });
                        }
                    }).catch(function(err){
                        console.log(err);
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消删除角色[' + row.name + ']'
                    });       
                });
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            addRole(){
                let _this = this;
                let mydata = {};
                mydata.code = this.newForm.addCode;
                mydata.name = this.newForm.addName;
                mydata.description =this.newForm.addDescription;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'add',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '新增角色成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible = false;
                        _this.newForm.addCode = null;
                        _this.newForm.addName = null;
                        _this.newForm.addDescription = null;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    console.log(err)
                })        
            },
            updateRole(){
                let _this = this;
                let mydata = {};
                mydata.roleId = this.updateFrom.roleId;
                mydata.code = this.updateFrom.newCode;
                mydata.name = this.updateFrom.newName;
                mydata.description =this.updateFrom.newDescription;
                axios({
                    method: 'post',
                    url:  _this.$store.state.defaultHttp+ _this.$store.state.roleUrl+'update',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改角色信息成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible1 = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    console.log(err);
                });      
            },
            handleSetPowers(index, row) {
                let _this = this;
                _this.dialogFormVisible2 = true;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.powersUrl+'getall'
                }).then(function(res){
                    if(res.data && res.data.code == 200) {
                        let result = res.data.result;
                        _this.$store.state.powersList = result;
                        _this.$store.state.powersListnumber = result.length;
                        // _this.$refs.selectPowers.toggleRowSelection(_this.$store.state.powersList);
                        if(row.authFunctions.length > 0) {
                            _this.$store.state.powersList.forEach(allPower => {
                                row.authFunctions.forEach(havePower => {
                                    if(allPower.functionNo == havePower.functionNo) {
                                        _this.$refs.selectPowers.toggleRowSelection(allPower,true);
                                    }
                                });
                            });
                        }
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                    
                }).catch(function(err){
                    console.log(err);
                });
            },
            handleSizeChange2(val) {
                let _this = this;
                _this.recordCount2 = val;
            },
            handleCurrentChange2(val) {
                let _this = this;
                _this.recentPage2 = val;
            },
            updatePowers() {
                let _this = this;
                _this.dialogFormVisible2 = false;
            },
            handleSetUsers(index, row) {

            }
        },
        
    }
</script>
