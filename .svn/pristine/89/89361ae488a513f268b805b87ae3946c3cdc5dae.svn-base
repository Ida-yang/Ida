<template>
    <div>
        <div class="grid-content">
            <el-button type="primary" size="small" @click="handleAdd()">
                新增角色
            </el-button>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.code" placeholder="角色编号"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.name" placeholder="角色名称"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.description" placeholder="角色描述"></el-input>
        </div>
        <el-button type="success" size="mini" @click="search()">查询</el-button>
        <el-button type="info" size="mini" @click="clear()">清空</el-button>

        <el-table
            :data="roleTableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center ;margin-top:10px;">
            <el-table-column
                header-align="center"
                align="center"
                prop="code"
                label="角色编号"
                width="120"
                >
            </el-table-column>
            <el-table-column
                prop="name"
                label="角色名称"
                header-align="center"
                align="center"
                width="200">
            </el-table-column>
            <el-table-column
                prop="description"
                header-align="center"
                align="center"
                label="角色描述"
                width="250">
            </el-table-column>
            <el-table-column label="操作"
                width="420"
                header-align="center"
                align="center">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                    <el-button
                    size="mini"
                    type="primary"
                    @click="handleSetPowers(scope.$index, scope.row)">修改权限</el-button>
                    <el-button
                    size="mini"
                    type="primary"
                    @click="handleSetUsers(scope.$index, scope.row)">修改用户组</el-button>
                    <el-button
                    size="mini"
                    type="danger"
                    @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog title="新增角色" center :visible.sync="dialogFormVisible" width="47%" :modal="false">
            <el-form :model="newForm">
                <el-form-item label="角色编号" :label-width="formLabelWidth">
                    <el-input v-model="newForm.addCode" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="角色名称" :label-width="formLabelWidth">
                    <el-input v-model="newForm.addName" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="角色描述" :label-width="formLabelWidth">
                    <el-input v-model="newForm.addDescription" auto-complete="off" type="textarea" :autosize="true"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="addRole">提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改角色" center :visible.sync="dialogFormVisible1" width="47%" :modal="false">
            <el-form :model="updateFrom">
                <el-form-item label="角色编号" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.newCode" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="角色名称" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.newName" auto-complete="off" ></el-input>
                </el-form-item>
                <el-form-item label="角色描述" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.newDescription" auto-complete="off" type="textarea" :autosize="true"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible1 = false">取 消</el-button>
                <el-button type="primary" @click="updateRole" >提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改权限" center :visible.sync="dialogFormVisible2" width="55%" :modal="false">
            <el-table
                :data="powersTableData.slice((recentPage2-1)*recordCount2,recentPage2*recordCount2)"
                ref="selectPowers"
                :max-height="maxheight"
                border
                style="text-align: center"
                :row-key="getRowKeys"
                @selection-change="handleSelectionChange">
                <el-table-column
                    type="selection"
                    header-align="center"
                    :reserve-selection="true"
                    prop="functionId"
                    width="55">
                </el-table-column>
                <el-table-column
                    prop="functionNo"
                    label="权限编码"
                    header-align="center"
                    align="center"
                    width="120">
                </el-table-column>
                <el-table-column
                    prop="description"
                    header-align="center"
                    align="center"
                    label="权限名称"
                    width="200">
                </el-table-column>
            </el-table>
            <div class="block numberPage">
                <el-pagination
                    @size-change="handleSizeChange2"
                    @current-change="handleCurrentChange2"
                    :current-page="recentPage2"
                    :page-sizes="[10, 15, 20, 25]"
                    :page-size="10"
                    layout="total, sizes, prev, pager, next, jumper"
                    :total="tableNumber2">
                </el-pagination>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible2 = false">取 消</el-button>
                <el-button type="primary" @click="updatePowers">提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改用户组" center :visible.sync="dialogFormVisible3" width="65%" :modal="false">
            <el-table
                :data="usersTableData.slice((recentPage3-1)*recordCount3,recentPage3*recordCount3)"
                ref="selectUsers"
                :max-height="maxheight"
                border
                style="text-align: center"
                :row-key="getRowKeys1"
                @selection-change="handleSelectionChange3">
                <el-table-column
                    type="selection"
                    header-align="center"
                    :reserve-selection="true"
                    prop="userId"
                    width="55">
                </el-table-column>
                <el-table-column
                    prop="enterpriseNumber"
                    label="用户ID"
                    header-align="center"
                    align="center"
                    width="180">
                </el-table-column>
                <el-table-column
                    prop="account"
                    label="用户账号"
                    header-align="center"
                    align="center"
                    width="120">
                </el-table-column>
                <el-table-column
                    prop="username"
                    header-align="center"
                    align="center"
                    label="用户名称"
                    width="120">
                </el-table-column>
            </el-table>
            <div class="block numberPage">
                <el-pagination
                    @size-change="handleSizeChange3"
                    @current-change="handleCurrentChange3"
                    :current-page="recentPage3"
                    :page-sizes="[10, 15, 20, 25]"
                    :page-size="10"
                    layout="total, sizes, prev, pager, next, jumper"
                    :total="tableNumber3">
                </el-pagination>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible3 = false">取 消</el-button>
                <el-button type="primary" @click="updateUsers">提 交</el-button>
            </div>
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
    .el-dialog {
        margin-left: 250px;
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'RoleAndManagement',
        computed: {
            roleTableData(){
                return store.state.roleList;
            },
            tableNumber(){
               return store.state.roleListnumber;     
            },
            powersTableData(){
                return store.state.powersList;
            },
            tableNumber2(){
               return store.state.powersListnumber;     
            },
            usersTableData(){
                return store.state.userList;
            },
            tableNumber3(){
               return store.state.userListnumber;     
            },
            Height(){
                return store.state.maxheight;
            },
        },
        props:{
            totalNum:Number,
        },
        store,
        data(){
            return {
                searchList:{
                    code: null,
                    name: null,
                    description: null,
                },
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                newForm:{
                    addCode: null,
                    addName: null,
                    addDescription: null,
                },
                updateFrom:{
                    roleId: null,
                    newCode: null,
                    newName: null,
                    newDescription: null,
                },
                powersForm:{
                    roleId: null,
                },
                usersForm:{
                    roleId: null,
                },
                dialogFormVisible: false,
                dialogFormVisible1: false,
                dialogFormVisible2: false,
                dialogFormVisible3: false,
                recentPage2: 1,
                recordCount2: 10,
                recentPage3: 1,
                recordCount3: 10,
                // 获取row的key值
                getRowKeys(row) {
                    return row.functionId;
                },
                getRowKeys1(row) {
                    return row.userId;
                },
                selectPowers: [],
                selectUsers: [],
                formLabelWidth: '120px',
                maxheight:null,
            }
        },
        created(){
            this.reloadTable();
        },
        mounted(){
            var _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;   
        },
        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {}
                if(flag) {
                    if(_this.searchList.code) {
                        searchList.code = _this.searchList.code;
                    }
                    if(_this.searchList.name) {
                        searchList.name = _this.searchList.name;
                    }
                    if(_this.searchList.description) {
                        searchList.description = _this.searchList.description;
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'getByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    if(res.data && res.data.code == 200) {
                        _this.$store.state.roleList = res.data.result.records;
                        _this.$store.state.roleListnumber = res.data.result.totalRecords;
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
            },
            clear() {
                this.searchList.code = null;
                this.searchList.name = null;
                this.searchList.description = null;
                this.$options.methods.reloadTable.bind(this)(true);
            },
            handleAdd() {
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增角色";
                addOrUpdateData.createForm = [
                    {"label":"角色编号","inputModel":"code"},
                    {"label":"角色名称","inputModel":"name"},
                    {"label":"角色描述","inputModel":"description"}
                ];
                addOrUpdateData.setForm = {
                    "code": "",
                    "name": "",
                    "description": ""};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.roleUrl+'add';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.newForm.addCode = null;
                // this.newForm.addName = null; 
                // this.newForm.addDescription = null;
                // this.dialogFormVisible = true;
            },
            handleEdit(index, row) {
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增角色";
                addOrUpdateData.createForm = [
                    {"label":"角色编号","inputModel":"code"},
                    {"label":"角色名称","inputModel":"name"},
                    {"label":"角色描述","inputModel":"description"}
                ];
                addOrUpdateData.setForm = {
                    "code": row.code,
                    "name": row.name,
                    "description": row.description};
                addOrUpdateData.submitData = {"roleId": row.roleId};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.roleUrl+'update';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.updateFrom.roleId = row.roleId; 
                // this.updateFrom.newCode = row.code;
                // this.updateFrom.newName = row.name; 
                // this.updateFrom.newDescription = row.description;
                // this.dialogFormVisible1 = true;
            },
            handleDelete(index, row) {
                let _this = this;
                _this.$confirm('是否确认删除角色[' + row.name + ']？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'delete?roleId=' + row.roleId,
                    }).then(function(res){
                        if(res.data.code && res.data.code == 200) {
                            _this.$message({
                                message: '删除角色成功',
                                type: 'success'
                            });
                            _this.$options.methods.reloadTable.bind(_this)();
                        } else {
                            _this.$message({
                                message: res.data.message,
                                type: 'error'
                            });
                        }
                    }).catch(function(err){
                        // console.log(err);
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消删除角色[' + row.name + ']'
                    });       
                });
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            addRole(){
                let _this = this;
                let mydata = {};
                mydata.code = this.newForm.addCode;
                mydata.name = this.newForm.addName;
                mydata.description =this.newForm.addDescription;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'add',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '新增角色成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    // console.log(err)
                })        
            },
            updateRole(){
                let _this = this;
                let mydata = {};
                mydata.roleId = this.updateFrom.roleId;
                mydata.code = this.updateFrom.newCode;
                mydata.name = this.updateFrom.newName;
                mydata.description =this.updateFrom.newDescription;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+ _this.$store.state.roleUrl+'update',
                    data: JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改角色信息成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible1 = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });      
            },
            handleSetPowers(index, row) {
                let _this = this;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.powersUrl+'getall'
                }).then(function(res){
                    if(res.data && res.data.code == 200) {
                        _this.$store.state.powersList = res.data.result;
                        let setOtherData = {};
                        setOtherData.title = "修改 ["+ row.name +"] 的权限";
                        setOtherData.setTable = [
                            {"head":"权限编号","body":"functionNo"},
                            {"head":"权限名称","body":"description"}];
                        setOtherData.tableData = _this.$store.state.powersList;
                        setOtherData.selectData = row.authFunctions;
                        setOtherData.submitDataId = null;
                        setOtherData.submitDataName = null;
                        setOtherData.identifier = "functionId";
                        setOtherData.code = "functionNo";
                        setOtherData.submitURL = _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'setFunctions?roleId='+row.roleId;
                        _this.$store.state.setOtherData = setOtherData;
                        _this.$router.push({ path: '/setRelationInfo' });
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });
                // let _this = this;
                // _this.dialogFormVisible2 = true;
                // _this.powersForm.roleId = row.roleId;
                // axios({
                //     method: 'post',
                //     url: _this.$store.state.defaultHttp+_this.$store.state.powersUrl+'getall'
                // }).then(function(res){
                //     if(res.data && res.data.code == 200) {
                //         let result = res.data.result;
                //         _this.$store.state.powersList = result;
                //         _this.$store.state.powersListnumber = result.length;
                //         _this.$refs.selectPowers.clearSelection();
                //         _this.selectPowers = [];
                //         if(row.authFunctions.length > 0) {
                //             result.forEach(allPower => {
                //                 row.authFunctions.forEach(havePower => {
                //                     if(allPower.functionNo == havePower.functionNo) {
                //                         _this.$refs.selectPowers.toggleRowSelection(allPower);
                //                     }
                //                 });
                //             });
                //         }
                //     } else {
                //         _this.$message({
                //             message: res.data.message,
                //             type: 'error'
                //         });
                //     }
                    
                // }).catch(function(err){
                //     console.log(err);
                // });
            },
            handleSizeChange2(val) {
                this.recordCount2 = val;
            },
            handleCurrentChange2(val) {
                this.recentPage2 = val;
            },
            updatePowers() {
                let _this = this;
                let powers = [];
                _this.selectPowers.forEach(select => {
                    let power = {};
                    power.functionId = select.functionId;
                    power.functionNo = select.functionNo;
                    powers.push(power);
                });
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+ _this.$store.state.roleUrl+'setFunctions?roleId='+_this.powersForm.roleId,
                    data: JSON.stringify(powers)
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改权限成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible2 = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                }); 
            },
            handleSelectionChange(rows) {
                this.selectPowers = [];
                if (rows) {
                    rows.forEach(row => {
                        if (row) {
                            this.selectPowers.push(row);
                        }
                    });
                }
            },
            handleSetUsers(index, row) {
                let _this = this;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.userUrl+'selectAll'
                }).then(function(res){
                    if(res.data && res.data.code == 200) {
                        _this.$store.state.userList = res.data.result;
                        let setOtherData = {};
                        setOtherData.title = "修改 ["+ row.name +"] 的用户组";
                        setOtherData.setTable = [
                            {"head":"用户账号","body":"account"},
                            {"head":"用户名称","body":"username"}];
                        setOtherData.tableData = _this.$store.state.userList;
                        setOtherData.selectData = row.listUser;
                        setOtherData.identifier = "userId";
                        setOtherData.notId = true;
                        setOtherData.submitURL = _this.$store.state.defaultHttp+_this.$store.state.roleUrl+'setUsers?roleId='+row.roleId;
                        _this.$store.state.setOtherData = setOtherData;
                        _this.$router.push({ path: '/setRelationInfo' });
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });
                // let _this = this;
                // _this.dialogFormVisible3 = true;
                // _this.usersForm.roleId = row.roleId;
                // axios({
                //     method: 'post',
                //     url: _this.$store.state.defaultHttp+_this.$store.state.userUrl+'selectAll'
                // }).then(function(res){
                //     if(res.data && res.data.code == 200) {
                //         let result = res.data.result;
                //         _this.$store.state.userList = result;
                //         _this.$store.state.userListnumber = result.length;
                //         _this.$refs.selectUsers.clearSelection();
                //         _this.selectedUsers = [];
                //         if(row.listUser.length > 0) {
                //             result.forEach(allUser => {
                //                 row.listUser.forEach(havePower => {
                //                     if(allUser.userId == havePower.userId) {
                //                         _this.$refs.selectUsers.toggleRowSelection(allUser);
                //                     }
                //                 });
                //             });
                //         }
                //     } else {
                //         _this.$message({
                //             message: res.data.message,
                //             type: 'error'
                //         });
                //     }
                    
                // }).catch(function(err){
                //     console.log(err);
                // });
            },
            handleSizeChange3(val) {
                this.recordCount3 = val;
            },
            handleCurrentChange3(val) {
                this.recentPage3 = val;
            },
            updateUsers() {
                let _this = this;
                let users = [];
                _this.selectedUsers.forEach(select => {
                    users.push(select.userId);
                });
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+ _this.$store.state.roleUrl+'setUsers?roleId='+_this.usersForm.roleId,
                    data: JSON.stringify(users)
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改用户组成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible3 = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                }); 
            },
            handleSelectionChange3(rows) {
                this.selectedUsers = [];
                if (rows) {
                    rows.forEach(row => {
                        if (row) {
                            this.selectedUsers.push(row);
                        }
                    });
                }
            }
        },
        
    }
</script>
