<template>
<!-- 采购入库 -->
    <div>
        <div class="grid-content">
            <el-button type="primary" size="small" @click="printMyData" >打印物料条码</el-button>
            <el-button type="danger" size="small" @click="cancelOrder">作废单据</el-button>
            <el-button type="success" size="small" @click="dialogVisible2=true" >获取U9数据</el-button>
        </div>
        <div class="grid-content searchList">
            <el-input v-model="ordername" placeholder="采购单号" @keyup.enter.native="selectData(1)"></el-input>
        </div>

        <div class="grid-content searchList">
            <el-input v-model="suppliername" placeholder="供应商" @keyup.enter.native="selectData(1)"></el-input>
        </div>
        <div class="grid-content searchList">
            <el-button type="success" size="small" @click="selectData(1)" >查询</el-button>
            <el-button type="info" size="small" @click="selectData(0)" >清空</el-button>
        </div>
        <el-table
            :data="tableData3"
            tooltip-effect="dark"
            border
            @cell-dblclick="CheckTheDetails"
            style="width: 100%"
            :max-height="maxheight"
            :row-key="getRowKeys"
            @selection-change="handleSelectionChange">
            <el-table-column
            type="selection"
            prop="id"
            width="40">
            </el-table-column>
            <el-table-column
                prop="ordername"
                fixed="left"
                label="单号"
                align="center"
                header-align="center"
                width="180">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    style="border:none;color:#3c8dbc"
                    @click="CheckTheDetails(scope.$index, scope.row)">{{ scope.row.ordername }}</el-button>
                </template>
            </el-table-column>
            <el-table-column
                prop="idOrdertype"
                fixed="left"
                label="单据类型"
                align="center"
                header-align="center"
                width="120">
                <template slot-scope="scope">
                    采购单
                </template>
            </el-table-column>
            <!-- <el-table-column
            fixed="left"
            prop="status"
            label="状态"
            header-align="center"
            width="80"
            align="center"
            :formatter="formatter">
            <template slot-scope="scope">
                <el-tag
                :type="scope.row.status ===0 ?'primary':'success'"
                close-transition>{{scope.row.status | formatStatus}}</el-tag>
            </template>
            </el-table-column> -->
            <el-table-column
                prop="suppliername"
                fixed="left"
                label="供应商"
                align="center"
                header-align="center"
                width="200">
            </el-table-column>
            <el-table-column
                prop="salesmanName"
                label="业务员"
                align="center"
                header-align="center"
                width="80">
            </el-table-column>
            <el-table-column
                prop="bustype"
                label="业务类型"
                align="center"
                header-align="center"
                width="100">
            </el-table-column>
            <el-table-column
                prop="deliveryTimeU9"
                label="交期"
                align="center"
                header-align="center"
                width="180">
            </el-table-column>
            <el-table-column
                prop="orderDateU9"
                label="单据日期"
                align="center"
                header-align="center"
                width="180">
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="currentPage"
            :page-sizes="[10, 20, 50, 100]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog
        title="获取U9数据"
        v-loading="loading"
        :visible.sync="dialogVisible2"
        :modal="false"
        center
        width="50%">
            <el-row :gutter="10">
                <el-col  :offset="2" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22">
                <el-date-picker
                        v-model="DateFrom"
                        align="right"
                        type="date"
                        format="yyyy-MM-dd" value-format="yyyy-MM-dd"
                        placeholder="业务日期-开始"
                        :picker-options="pickerOptions1">
                    </el-date-picker>
                    <el-date-picker
                        v-model="DateTo"
                        align="right"
                        type="date"
                        format="yyyy-MM-dd" value-format="yyyy-MM-dd"
                        style="margin=left:10px;"
                        placeholder="业务日期-结束"
                        :picker-options="pickerOptions1">
                    </el-date-picker>
                </el-col>
                <el-col :offset="2" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:12px">
                    <el-input v-model="CustomerName" placeholder="客户名称" style="width:220px"></el-input>
                    <el-input v-model="DocNo" placeholder="出货单号" style="width:220px"></el-input>
                </el-col>
                <el-col :offset="2" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:12px">
                    <el-input v-model="OrderNo" placeholder="订单号" style="width:220px"></el-input>
                    <el-input v-model="CreatBy" placeholder="制单人" style="width:220px"></el-input>
                </el-col>
            </el-row>
            <span slot="footer" class="dialog-footer">
                <el-button type="info" @click="dialogVisible = false">重 置</el-button>
                <el-button type="success" @click="refresh" >获取U9数据</el-button>
                <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
            </span>
        </el-dialog>
        <el-dialog
        :title="U9Title"
        :modal="false" 
        center
        :visible.sync="dialogVisible3"
        style="max-height:55%"
        width="55%">
            <el-row :gutter="10">
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22">
                   <span>获取到数据数量：</span><span>{{successNumber}}</span>
                </el-col>
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:30px;"  v-if="Isshow">
                   <span>重复数量：</span><span>{{failureNumber}}</span>
                </el-col>
                <el-col  :offset="1" :xs="22" :sm="22" :md="22"  :lg="22" :xl="22" style="margin-top:30px;" v-if="Isshow">
                   <span>重复单号（请先作废）:</span>
                   <p style="margin-left:40px;margin-top:10px">{{failureStr}}</p>
                </el-col>
            </el-row>
            <span slot="footer" class="dialog-footer" style="text-align: center">
                <el-button type="primary" @click="dialogVisible3 = false">关  闭</el-button>
            </span>
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
        
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    import FileSaver from 'file-saver'
    import XLSX from 'xlsx'
    export default {
        name:'ProcurementWarehousing',
        props:{
            totalNum:Number,
        },
        filters: {
            formatStatus: function (val) {
                return val == 0 ? "待入库" : val== 3 ?  "已入库" : "未知状态";
            },
        },
        inject:["reload"],
        store,
        data(){
            return {
                // 获取row的key值
                getRowKeys(row) {
                    return row.id;
                },
                maxheight:null,
                deliverynum:null,
                dialogVisible: false,
                dialogVisible2: false,
                dialogVisible3: false,
                U9Title:"失败",
                DateFrom :'',//开始时间
                DateTo  :'',//结束时间
                CustomerName:null,//客户名称 ~
                DocNo:null,//出货单号
                OrderNo:null,//订单号
                CreatBy:null,//制单人

                data:[],
                data1:[],
                loading:false,
                allData : [],
                printIds : [],
                indexNumber:null,
                successNumber:0,
                failureNumber:0,
                failureStr:'',
                ordername:null,
                suppliername:null,
                Isshow:true,
                selectedData: [],
                inputData : {},
                currentPage:1,//默认第一页
                pageSize:10,//默认10条
                formLabelWidth: '120px',
                tableData3: [],
                tableNumber:null,
                pickerOptions1: {
                    shortcuts: [{
                        text: '最近一周',
                        onClick(picker) {
                        const end = new Date();
                        const start = new Date();
                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
                        picker.$emit('pick', [start, end]);
                        }
                    }, {
                        text: '最近一个月',
                        onClick(picker) {
                        const end = new Date();
                        const start = new Date();
                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
                        picker.$emit('pick', [start, end]);
                        }
                    }, {
                        text: '最近三个月',
                        onClick(picker) {
                        const end = new Date();
                        const start = new Date();
                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
                        picker.$emit('pick', [start, end]);
                        }
                    }]
                    },
                
            }
        },
        computed:{
            Height(){
                return store.state.maxheight
            }
        },
        mounted(){
            var _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;   
        },
        
        methods: {
            formatter(row, column) {
                return row.address;
            },
            //获取U9数据
            refresh(){
                let _this = this;
                _this.loading = true;
                if(_this.MoDocNo == undefined || _this.MoDocNo == "") {
                    if(!_this.DateFrom) {//开始日期为空
                        this.$message({
                            message: '请选择开始日期',
                            type: 'warning'
                        });
                        return;
                    }
                    if(!_this.DateTo) {//结束日期为空
                        this.$message({
                            message: '请选择结束日期',
                            type: 'warning'
                        });
                        return;
                    }
                }
                if(_this.DateFrom && _this.DateTo) {
                    var DateFrom = Date.parse(_this.DateFrom)/1000/60/60/24;
                    var DateTo = Date.parse(_this.DateTo)/1000/60/60/24;
                    
                    if(DateTo-DateFrom > 30) {
                        this.$message({
                            message: '起止日期不能超过30天',
                            type: 'warning'
                        });
                        return;
                    } else if(DateTo-DateFrom < 0) {
                        this.$message({
                            message: '开始日期不能在结束日期后',
                            type: 'warning'
                        });
                        return;
                    } else {
                        _this.DateFrom = _this.DateFrom + " 00:00:00";
                        _this.DateTo = _this.DateTo + " 23:59:59";
                    }
                }
                let sendData = {};
                    sendData.DateFrom = _this.DateFrom
                    sendData.DateTo  = _this.DateTo
                    sendData.CustomerName = _this.CustomerName
                    sendData.DocNo = _this.DocNo
                    sendData.OrderNo = _this.OrderNo
                    sendData.CreatBy = _this.CreatBy
                var thisUrl = _this.$store.state.defaultHttp +"getU9Data/getDeliveryOrderByCodi";
                axios({
                        method: 'post',
                        url:thisUrl,
                        data:JSON.stringify(sendData),
                    }).then(function(res){
                        if(res.data.code == 200){
                            _this.successNumber = res.data.result.successcount
                            _this.failureNumber = res.data.result.errorcount
                            let dataArr=res.data.result.data
                            for(var i=0 ; i<dataArr.length;i++){
                                _this.failureStr += '  [  '+dataArr[i]+'  ]  '
                            }
                            _this.DateFrom=null
                            _this.DateTo=null
                            _this.loading = false;
                            if(res.data.result.errorcount == 0){
                                _this.Isshow=false;
                                _this.U9Title = "成功"
                            }
                            _this.dialogVisible2 = false;
                            _this.dialogVisible3=true;
                        }
                        
                    }).catch(function(err){
                        // console.log(err)
                    })
            },



            printMyData(){
                if(this.selectedData.length == 0){
                    this.$message({
                        message: '请先选择工单',
                        type: 'warning'
                    });
                }else{
                    this.dialogVisible = true
                }
            },
            lodData(page,count){
                let _this = this;
                let data = {};
                // data.orderType = 1;//orderType为1代表采购单
                axios({
                   method: 'get',
                   url: _this.$store.state.defaultHttp+_this.$store.state.purchaseOrder+'getByPage?recentPage='+page+'&recordCount='+count+'&orderType=1',
                //    data: JSON.stringify(data)
                //    headers:{'wmsnet-token':sessionStorage.getItem('token')},
                }).then(function(res){
                    // console.log(res)
                    _this.tableData3 = res.data.result.records
                    _this.tableNumber = res.data.result.totalRecords
                }).catch(function(err){
                    // console.log(err)
                })
            },
            selectDataModel(page,count,selectsuccess){
                let _this = this;
                // _this.inputData.orderType = 1;//orderType为1代表采购单
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.purchaseOrder+'getByPage?recentPage='+page+'&recordCount='+count+'&orderType=1',
                    data:_this.inputData,
                }).then(function(res){
                    if(res.data.code == 200){
                        _this.tableData3 = res.data.result.records
                        _this.tableNumber = res.data.result.totalRecords
                        if(selectsuccess){
                        if(_this.inputData !== undefined){
                                _this.$message({
                                message: '查询成功',
                                type: 'success'
                                })
                            }     
                        }
                    }else if(res.data.code == 500){
                            if(res.data.message == 'Index: 0, Size: 0'){
                                 _this.$message({
                                    message: '未查询到符合条件数据',
                                    type: 'warning'
                                })
                            }else{
                                _this.$message({
                                    message: res.data.message,
                                    type: 'warning'
                                })
                            }
                    }
                    
                }).catch(function(err){
                    // console.log(err)
                })
            },
            selectData(num){
                // this.inputData.suppliername  = this.suppliername;
                if(num == 1){
                    this.inputData.ordername = this.DelBlankSpace(this.ordername);
                    this.inputData.suppliername = this.DelBlankSpace(this.suppliername);
                }else{
                    this.inputData.ordername = null;
                    this.inputData.suppliername = null;
                    this.suppliername = null;
                    this.ordername = null;
                }
                
                this.selectDataModel(1,10,true)
                
            },
            CheckTheDetails(index, row){
                this.$store.state.inboundOrderId = ""
                this.$store.state.inboundOrderId = row.id;
                this.$router.push({ path: '/WarehousingDetails' })
            },
            formatter(row, column) {
                return row.address;
            },
            handleSelectionChange(rows) {
                this.selectedData = [];
                if (rows) {
                    rows.forEach(row => {
                        if (row) {
                            this.selectedData.push(row);
                        }
                    });
                }
            },
            handleSizeChange(val) {
                this.selectDataModel(1,val,false)
                this.pageSize = val;
                
            },
            handleCurrentChange(val) {
                this.selectDataModel(val,this.pageSize,false)
            },

            //作废采购工单
            cancelOrder(){
                if(this.selectedData.length == 0 ){
                    this.$message({
                        message: '请选择需要作废的采购单号',
                        type: 'warning'
                    });
                    return
                }
                if(this.selectedData.length > 1 ){
                    this.$message({
                        message: '请选择单个采购单号进行该操作',
                        type: 'warning'
                    });
                    return
                }
                
                this.$confirm('是否作废['+this.selectedData[0].ordername+']此采购单号?', '提示', {
                    cancelButtonText: '取消',
                    confirmButtonText: '确定',
                    type: 'warning'
                }).then(() => {
                    let Data= {}
                    Data.id = this.selectedData[0].id;
                    // Data.state = this.selectedData[0].state;
                    // let JsonData=[];
                    // JsonData.push(Data)
                    let _this=this;
                    axios({
                        method: 'post',
                        url: _this.$store.state.defaultHttp+_this.$store.state.purchaseOrder+'deleteOrder?id=' + Data.id,
                        // data:JSON.stringify(JsonData),
                    }).then(function(res){
                        if(res.data.code==200){
                            _this.$message({
                                type: 'success',
                                message: '作废成功!'
                            });
                            _this.tableData3 = null
                            _this.tableNumber = null
                            _this.reload()
                        }
                        
                    }).catch(function(err){
                        // console.log(err)
                    })
                    
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消作废操作'
                    });          
                });
            },
    },
    created(){
        this.lodData(1,10)
    },
        
    }
</script>
