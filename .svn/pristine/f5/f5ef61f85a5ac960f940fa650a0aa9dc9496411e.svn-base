<template>
    <!-- 储位资料  -->
    <div>
        <div class="grid-content">
            <el-button type="primary" size="small" @click="handleAdd()">
                新增储位
            </el-button>
            <el-button type="primary" size="small" @click="printPosition()">
                打印储位条码
            </el-button>
            <el-button type="primary" size="small" @click="printShelves()">
                打印货架条码
            </el-button>
        </div>
        <div class="searchList">
            <el-select
                multiple
                collapse-tags
                @change="changeParentIds()"
                v-model="searchList.parentIds"
                placeholder="选择仓库">
                <el-option
                v-for="item in options"
                :key="item.ckId"
                :label="item.ckName"
                :value="item.ckId">
                </el-option>
            </el-select>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.code" placeholder="储位编码"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.name" placeholder="储位名称"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.address" placeholder="储位类型"></el-input>
        </div>
        <div class="searchList">
            <el-button type="success" size="mini" @click="search()">查询</el-button>
            <el-button type="info" size="mini" @click="reset()">清空</el-button>
        </div>
        <el-table
            :data="positionTableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center">
            <el-table-column
                header-align="center"
                align="center"
                prop="ckName"
                label="仓库"
                width="220"
                >
            </el-table-column>
            <el-table-column
                prop="code"
                label="储位编码"
                header-align="center"
                align="center"
                width="120">
            </el-table-column>
            <el-table-column
                prop="name"
                label="储位名称"
                header-align="center"
                align="center"
                width="120">
            </el-table-column>
            <el-table-column
                prop="address"
                label="储位类型"
                header-align="center"
                align="center"
                width="120">
            </el-table-column>
            <el-table-column label="操作"
                width="180"
                header-align="center"
                align="center">
                <template slot-scope="scope">
                    <el-button
                    size="mini"
                    @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                    <el-button
                    size="mini"
                    type="danger"
                    @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
        <el-dialog title="新增储位" center :visible.sync="dialogFormVisible" width="47%" :modal="false">
            <el-form :model="newForm">
                <el-form-item label="储位编码" :label-width="formLabelWidth">
                    <el-input v-model="newForm.code" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="储位名称" :label-width="formLabelWidth">
                    <el-input v-model="newForm.name" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="储位类型" :label-width="formLabelWidth">
                    <el-input v-model="newForm.address" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="仓库" :label-width="formLabelWidth">
                    <el-select
                        v-model="newForm.parentid"
                        placeholder="请选择仓库"
                        style="width:100%">
                        <el-option
                        v-for="item in options"
                        :key="item.ckId"
                        :label="item.ckName"
                        :value="item.ckId">
                        </el-option>
                    </el-select>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="addPosition">提 交</el-button>
            </div>
        </el-dialog>
        <el-dialog title="修改储位" center :visible.sync="dialogFormVisible1" width="47%" :modal="false">
            <el-form :model="updateFrom">
                <el-form-item label="储位编码" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.code" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="储位名称" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.name" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="储位类型" :label-width="formLabelWidth">
                    <el-input v-model="updateFrom.address" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="仓库" :label-width="formLabelWidth">
                    <el-select
                        v-model="updateFrom.parentid"
                        value-key="id"
                        placeholder="请选择仓库"
                        style="width:100%">
                        <el-option
                            v-for="item in options"
                            :key="item.ckId"
                            :label="item.ckName"
                            :value="item.ckId">
                        </el-option>
                    </el-select>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible1 = false">取 消</el-button>
                <el-button type="primary" @click="updatePosition" >提 交</el-button>
            </div>
        </el-dialog>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 30px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 30px;
        line-height: 30px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }
    .el-table td, .el-table th {
        padding: 8px 0;
        line-height:30px; 
    }
    .el-dialog {
        margin-left: 250px;
    }

    .searchList {
        width: 200px;
    }
    /* 解决仓库名称过长的显示问题 */
    .el-select__tags-text {
        display: inline-block;
        max-width: 100px;
        overflow: hidden;
        text-overflow:ellipsis;
        white-space: nowrap; 
    }
    .el-select .el-tag__close.el-icon-close {
        top: -7px;
    }
</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'StoragePosition',
        computed: {
            positionTableData(){
                return store.state.positionList;
            },
            tableNumber(){
               return store.state.positionListnumber;     
            },
            options(){
                return store.state.warehouseList;
            },
            Height(){
                return store.state.maxheight;
            },
        },
        props:{
            totalNum:Number,
        },
        store,
        data(){
            return {
                searchList:{
                    parentIds: [],
                    code: null,
                    name: null,
                    address: null
                },
                searchListNew:{
                    parentIds: [],
                    code: null,
                    name: null,
                    address: null
                },
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                newForm:{
                    code: null,
                    name: null,
                    locationtype: null,
                    address: null,
                    parentid: null
                },
                updateFrom:{
                    ckId: null,
                    code: null,
                    name: null,
                    locationtype: null,
                    address: null,
                    parentid: null
                },
                dialogFormVisible: false,
                dialogFormVisible1: false,
                formLabelWidth: '120px',
                maxheight:null,
            }
        },
        // beforeCreate(){
        //     let _this = this;
        //     this.$nextTick(function () {
        //         axios({
        //             method: 'post',
        //             url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'getStoragelocationByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
        //         }).then(function(res){
        //             _this.$store.state.positionList = res.data.result.records;
        //             _this.$store.state.positionListnumber = res.data.result.totalRecords;
                    
        //         }).catch(function(err){
        //             // console.log(err);
        //         });
        //         axios({
        //             method: 'post',
        //             url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'selectAll',
        //         }).then(function(res){
        //             _this.$store.state.warehouseList = res.data.result;
        //             _this.$store.state.warehouseListnumber = res.data.result.length;
        //         }).catch(function(err){
        //             // console.log(err);
        //         });
        //     });
        // },
        mounted(){
            let _this=this;
            this.reloadTable();
            this.loadWarehouse();
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;   
        },
        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {}
                if(flag) {
                    if(_this.searchList.parentIds.length != 0) {
                        searchList.parentIds = _this.searchList.parentIds;
                    }
                    if(_this.searchList.code) {
                        searchList.code = _this.DelBlankSpace(_this.searchList.code);
                    }
                    if(_this.searchList.name) {
                        searchList.name = _this.DelBlankSpace(_this.searchList.name);
                    }
                    if(_this.searchList.address) {
                        searchList.address = _this.DelBlankSpace(_this.searchList.address);
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'getStoragelocationByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    if(res.data && res.data.code == 200) {
                        _this.$store.state.positionList = res.data.result.records;
                        _this.$store.state.positionListnumber = res.data.result.totalRecords;
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                    
                }).catch(function(err){
                    // console.log(err);
                });
            },
            loadWarehouse(row) {
                let _this = this;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'webAddStorageSelectAll',
                }).then(function(res){
                    // if(row && row.parentid) {
                    //     _this.newForm.parentid = row.parentid;
                    // } else {
                    //     _this.newForm.parentid = "";
                    // }
                    _this.$store.state.warehouseList = res.data.result;
                    _this.$store.state.warehouseListnumber = res.data.result.length;
                }).catch(function(err){
                    // console.log(err);
                })
            },
            changeParentIds() {
                this.$options.methods.reloadTable.bind(this)(true);
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
                // this.searchList.parentIds = [];
                // this.searchList.code = null;
                // this.searchList.name = null;
                // this.searchList.address = null;
            },
            reset(){
                this.searchList = Object.assign({}, this.searchListNew);
                this.$options.methods.reloadTable.bind(this)(true);
            },
            handleAdd() {
                this.$options.methods.loadWarehouse.bind(this)(null);//更新仓库数据
                let warehouseList = this.$store.state.warehouseList;
                let addOrUpdateData = {};
                addOrUpdateData.title = "新增储位";
                addOrUpdateData.createForm = [
                    {
                        "label": "仓库",
                        "inputModel": "parentid",
                        "type": "select",
                        "okey": "ckId",
                        "ovalue": "ckId",
                        "olabel": "ckName",
                        "placeholder": "请选择仓库",
                        "options": warehouseList,
                        "multiple": false
                    },
                    {"label":"储位编码","inputModel":"code"},
                    {"label":"储位名称","inputModel":"name"},
                    {"label":"储位类型","inputModel":"address"},
                ];
                addOrUpdateData.setForm = {
                    "parentid": "",
                    "code": "",
                    "name": "",
                    "address": "",
                };
                addOrUpdateData.submitData = {"locationtype": 2};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.warehouseUrl+'addStoragelocation';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.newForm.code = null;
                // this.newForm.name = null; 
                // this.newForm.address = null;
                // this.newForm.parentid = null;
                // this.$options.methods.loadWarehouse.bind(this)(null);
                // this.dialogFormVisible = true;
            },
            handleEdit(index, row) {
                this.$options.methods.loadWarehouse.bind(this)(null);//更新仓库数据
                let warehouseList = this.$store.state.warehouseList;
                let addOrUpdateData = {};
                addOrUpdateData.title = "修改储位 [" + row.name +"]";
                addOrUpdateData.createForm = [
                    {
                        "label": "仓库",
                        "inputModel": "parentid",
                        "type": "select",
                        "okey": "ckId",
                        "ovalue": "ckId",
                        "olabel": "ckName",
                        "placeholder": "请选择仓库",
                        "options": warehouseList,
                        "multiple": false
                    },
                    {"label":"储位编码","inputModel":"code"},
                    {"label":"储位名称","inputModel":"name"},
                    {"label":"储位类型","inputModel":"address"},
                ];
                addOrUpdateData.setForm = {
                    "parentid": row.parentid,
                    "code": row.code,
                    "name": row.name,
                    "address": row.address,
                };
                addOrUpdateData.submitData = {"ckId": row.ckId, "locationtype": 2};
                addOrUpdateData.submitURL = this.$store.state.defaultHttp+this.$store.state.warehouseUrl+'updateStoragelocation';
                this.$store.state.addOrUpdateData = addOrUpdateData;
                this.$router.push({ path: '/addOrUpdate' });
                // this.updateFrom.ckId = row.ckId;
                // this.updateFrom.code = row.code; 
                // this.updateFrom.name = row.name; 
                // this.updateFrom.address = row.address;
                // this.updateFrom.parentid = row.parentid; 
                // this.$options.methods.loadWarehouse.bind(this)(row);
                // this.dialogFormVisible1 = true;
            },
            handleDelete(index, row) {
                let _this = this;
                _this.$confirm('是否确认删除储位[' + row.name + ']？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({ value }) => {
                    axios({
                        method: 'get',
                        url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'delete?enterpriseNumber=' + row.enterpriseNumber,
                    }).then(function(res){
                        if(res.data.code && res.data.code == 200) {
                            _this.$message({
                                message: '删除储位成功',
                                type: 'success'
                            });
                            _this.$options.methods.reloadTable.bind(_this)();
                        } else {
                            _this.$message({
                                message: res.data.message,
                                type: 'error'
                            });
                        }
                    }).catch(function(err){
                        // console.log(err);
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消删除储位[' + row.positionname + ']'
                    });       
                });
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)();
            },
            addPosition(){
                let _this = this;
                let mydata = {};
                mydata.code = _this.newForm.code;
                mydata.name = _this.newForm.name;
                mydata.address = _this.newForm.address;
                mydata.locationtype = 2;
                mydata.parentid = _this.newForm.parentid;

                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.warehouseUrl+'addStoragelocation',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '新增储位成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    // console.log(err)
                })        
            },
            updatePosition(){
                let _this = this;
                let mydata = {};
                let orgArr = [];
                mydata.ckId = _this.updateFrom.ckId;
                mydata.code = _this.updateFrom.code;
                mydata.name = _this.updateFrom.name;
                mydata.address = _this.updateFrom.address;
                mydata.locationtype = 2;
                mydata.parentid = _this.updateFrom.parentid;
                
                axios({
                    method: 'post',
                    url:  _this.$store.state.defaultHttp+ _this.$store.state.warehouseUrl+'updateStoragelocation',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改储位信息成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible1 = false;
                        _this.$options.methods.reloadTable.bind(_this)();
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });      
            },
            printPosition() {},
            printShelves(){}
        },
        
    }
</script>
