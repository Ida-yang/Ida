<template>
    <!-- 物料资料 -->
    <div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.productNo" placeholder="物料编码"></el-input>
        </div>
        <div class="searchList" @keyup.enter="search()">
            <el-input v-model="searchList.productName" placeholder="物料名称"></el-input>
        </div>
        <el-table
            :data="tableData"
            :max-height="maxheight"
            border
            style="width: 100% ;text-align: center；margin-top:10px;">
            <el-table-column
                header-align="center"
                align="center"
                prop="productNo"
                label="物料编码"
                width="120">
            </el-table-column>
            <el-table-column
                prop="productname"
                header-align="center"
                align="center"
                label="物料名称"
                width="160">
            </el-table-column>
            <el-table-column label="工序/工艺流程"
                width="160"
                header-align="center"
                align="center">
                <template slot-scope="scope">
                    
                    <el-button
                        v-if="scope.row.haveserial == 0"
                        type="primary"
                        size="small"
                        style="width:100%"
                        @click="setTechnology(scope.$index, scope.row)">修改工艺流程</el-button>
                    <el-select
                        v-if="scope.row.haveserial == 1"
                        @change="setProcess(scope.$index, scope.row)"
                        v-model="scope.row.idProcess"
                        placeholder="选择工序">
                        <el-option
                            v-for="item in options"
                            :key="item.id"
                            :label="item.name"
                            :value="item.id">
                        </el-option>
                    </el-select>
                </template>
            </el-table-column>
            <el-table-column
                prop="mustScan"
                header-align="center"
                align="center"
                label="必须扫描"
                width="80">
                <template slot-scope="scope">
                    <p v-if="scope.row.mustScan == 0">
                        是
                    </p>
                    <p v-if="scope.row.mustScan == 1">
                        否
                    </p>
                </template>
            </el-table-column>
            <el-table-column
                prop="productmodel"
                header-align="center"
                align="center"
                label="产品机型"
                width="160">
            </el-table-column>
            <el-table-column
                prop="parameter"
                header-align="center"
                align="center"
                label="详细参数"
                width="160">
            </el-table-column>
            <el-table-column
                prop="spec"
                header-align="center"
                align="center"
                label="规格"
                width="160">
            </el-table-column>
            <el-table-column
                prop="color"
                header-align="center"
                align="center"
                label="颜色"
                width="60">
            </el-table-column>
            <el-table-column
                prop="unit"
                header-align="center"
                align="center"
                label="单位"
                width="60">
            </el-table-column>
            <el-table-column
                prop="haveserial"
                header-align="center"
                align="center"
                label="类型"
                width="60">
                <template slot-scope="scope">
                    <p v-if="scope.row.haveserial == 0">
                        成品
                    </p>
                    <p v-if="scope.row.haveserial == 1">
                        原料
                    </p>
                </template>
            </el-table-column>
        </el-table>
        <div class="block numberPage">
            <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="recentPage"
            :page-sizes="[10, 15, 20, 25]"
            :page-size="10"
            layout="total, sizes, prev, pager, next, jumper"
            :total="tableNumber">
            </el-pagination>
        </div>
    </div>
</template>
<style>
    .numberPage{
        text-align: right;
        position: relative;
        top: 0;
        background-color: #fff;
        width: 100%;
    }
    .el-dialog__body {
        padding: 30px 80px 30px 20px !important;
        color: #606266;
        font-size: 14px;
    }
    .el-table td, .el-table th {
        padding: 6px 0 !important;
        line-height: 24px;
    }
    .btnSet{
        height: 40px;
    }
    .el-input__inner {
        height: 24px;
        line-height: 24px;
        width: 100%;
    }
    .el-table {
        font-size: 12px!important;
    }

</style>

<script>
    import store from '../../../../store/store'
    import axios from 'axios'
    export default {
        name:'MaterielData',
        computed: {
            tableData(){
                return store.state.materielList;
            },
            tableNumber(){
               return store.state.materielListnumber;     
            },
            options() {
                return store.state.productProcessList;
            },
            Height(){
                return store.state.maxheight;
            },
        },
        props:{
            totalNum:Number,
        },
        data(){
            return {
                searchList:{
                    productNo:null,
                    productName:null,
                },
                idProcess: null,
                recentPage:1,//默认第一页
                recordCount:10,//默认10条
                newForm:{
                    productNo:null,
                    productName:null,
                    mustScan:null,
                },
                updateFrom:{
                    id:null,
                    productNo:null,
                    productName:null,
                    mustScan:null,
                },
                dialogFormVisible: false,
                dialogFormVisible2: false,
                formLabelWidth: '120px',
                maxheight:null,
            }
        },
        created(){
            this.reloadTable();
        },
        watch:{
            "$route": "reloadTable"
        },
        mounted(){
            let _this=this;
            _this.$store.commit("getMaxHeight")
            _this.maxheight = _this.Height;   
        },
        methods: {
            reloadTable(flag) {
                let _this = this;
                let searchList = {}
                if(flag) {
                    if(_this.searchList.productNo) {
                        searchList.productNo = _this.searchList.productNo;
                    }
                    if(_this.searchList.productName) {
                        searchList.productName = _this.searchList.productName;
                    }
                }
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.materielUrl+'getByPage?recentPage='+_this.recentPage+'&recordCount='+_this.recordCount,
                    data: JSON.stringify(searchList),
                }).then(function(res){
                    _this.$store.state.materielList = res.data.result.records;
                    _this.$store.state.materielListnumber = res.data.result.totalRecords;
                    
                }).catch(function(err){
                    // console.log(err);
                });
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.productProcessUrl+'getAll',
                }).then(function(res){
                    _this.$store.state.productProcessList = res.data.result;
                }).catch(function(err){
                    // console.log(err);
                })
            },
            search() {
                this.$options.methods.reloadTable.bind(this)(true);
                this.searchList.productNo = null;
                this.searchList.productName = null;
            },
            handleAdd() {
                this.newForm.productNo = null;
                this.newForm.productName = null;   
                this.newForm.mustScan = null;
                this.dialogFormVisible = true;
            },
            setTechnology(index, row) {
                let _this = this;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.techProcessUrl+'getAll',
                }).then(function(res){
                    _this.$store.state.techProcessList = res.data.result;

                    let setOtherData = {};
                    setOtherData.title = "修改 ["+ row.productname +"] 的工艺流程";
                    setOtherData.setTable = [
                        {"head":"工艺编号","body":"code"},
                        {"head":"工艺名称","body":"name"},
                        {"head":"描述","body":"remark"}];
                    setOtherData.tableData = _this.$store.state.techProcessList;
                    setOtherData.selectData = row.techprocess;
                    setOtherData.submitDataId = row.id;
                    setOtherData.submitDataName = "techprocess";
                    setOtherData.identifier = "id";
                    setOtherData.submitURL = _this.$store.state.defaultHttp+_this.$store.state.materielUrl+'updateTechprocess';
                    _this.$store.state.setOtherData = setOtherData;
                    _this.$router.push({ path: '/setRelationInfo' });
                }).catch(function(err){
                    // console.log(err);
                });
            },
            setProcess(index, row) {
                let _this = this;
                let product = {};
                product.id = row.id;
                product.idProcess = row.idProcess;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.materielUrl+'updateProduprocess',
                    data: JSON.stringify(product),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改工序成功',
                            type: 'success'
                        });
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    // console.log(err)
                });
            },
            handleSizeChange(val) {
                let _this = this;
                _this.recordCount = val;
                _this.$options.methods.reloadTable.bind(_this)(false);
            },
            handleCurrentChange(val) {
                let _this = this;
                _this.recentPage = val;
                _this.$options.methods.reloadTable.bind(_this)(false);
            },
            addProduct(){
                let _this = this;
                let mydata = {};
                mydata.productNo = this.newForm.productNo;
                mydata.productName = this.newForm.productName;
                mydata.mustScan = this.newForm.mustScan;
                axios({
                    method: 'post',
                    url: _this.$store.state.defaultHttp+_this.$store.state.materielUrl+'add',
                    data: JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '新增物料成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        })
                    }
                }).catch(function(err){
                    // console.log(err)
                })        
            } ,
            updateProduct(){
                let _this = this;
                let mydata = {};
                mydata.id = this.updateFrom.id;
                mydata.productNo = this.updateFrom.productNo;
                mydata.productName = this.updateFrom.productName;
                mydata.mustScan = this.updateFrom.mustScan;
                axios({
                    method: 'post',
                    url:  _this.$store.state.defaultHttp+ _this.$store.state.materielUrl+'update',
                    data:JSON.stringify(mydata),
                }).then(function(res){
                    if(res.data.code && res.data.code == 200) {
                        _this.$message({
                            message: '修改物料成功',
                            type: 'success'
                        });
                        _this.dialogFormVisible2 = false;
                        _this.$options.methods.reloadTable.bind(_this)(false);
                    } else {
                        _this.$message({
                            message: res.data.message,
                            type: 'error'
                        });
                    }
                }).catch(function(err){
                    // console.log(err);
                });      
            }  
        },
        
    }
</script>
